<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: amia | BLOG Progress Process]]></title>
  <link href="http://ablwr.github.io/blog/categories/amia/atom.xml" rel="self"/>
  <link href="http://ablwr.github.io/"/>
  <updated>2015-11-11T09:59:45-05:00</updated>
  <id>http://ablwr.github.io/</id>
  <author>
    <name><![CDATA[Ashley Blewer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Non-technical person's guide to becoming an open source software contributor via Github]]></title>
    <link href="http://ablwr.github.io/blog/2014/11/03/non-technical-persons-guide-to-becoming-an-open-source-software-contributor-via-github/"/>
    <updated>2014-11-03T21:53:42-05:00</updated>
    <id>http://ablwr.github.io/blog/2014/11/03/non-technical-persons-guide-to-becoming-an-open-source-software-contributor-via-github</id>
    <content type="html"><![CDATA[<p>A month ago, I was (lightly, &hellip;I think) called out for bailing on speaking about <a href="www.bavc.org/qctools">QCTools</a> for the Association of Moving Image Archivists conference. Nevermind the bait-and-switch last-minute-surprise-you’re-speaking scenario I had landed myself in and that I really really did want to see my pals give a talk on BitTorrent and private tracker communities as archives, I did still feel a twinge of guilt for dropping out last minute. Sorry, guys. The BitTorrent panel was pretty baller, though, and Lauren Sorensen did an excellent survey of using git from the command line earlier in the day.</p>

<p>To make up for it, I am here today on this blog to talk about how you, non-technical or kinda-technical or just-scared-of-git person, can dig in and support open source projects like QCTools, even if you don’t speak C++ (which is what I started planning for in the 2-day scramble before leaving New York on a jet plane).</p>

<p>Here it is:</p>

<p>I think a lot of people are intuitively intimidated by using git because it can be hard to understand or because they don’t know how to read code. But not being able to read code is okay because you can still make valuable contributions in English! One of the biggest sore spots for most open source software (and even proprietary software) is a lack of clear, concise documentation. But at least with OSS, if something in the documentation is confusing, instead of going on Twitter or something and being like “wah wah this free thing I downloaded totally sucks,” you can actually go in there and CHANGE it. Or at least make a request to change it.</p>

<p>I’m gonna go through how you might make those changes without having to do anything “techy.”</p>

<p>Uh, so I went to the Flatiron School which is an immersive web development program. This is how I did things on Day 1 as a shortcut to getting what I wanted (which was to deploy a user profile for myself)*. I can’t get away with that stuff now but you totally can. It’s not bad practice or anything (well, maybe the context in which I was doing it was, but that&rsquo;s neither here nor there). Actually, I did a quick edit like this today because I wanted to fix someone else’s documentation but I didn’t want to bother going through all the other steps to copy and download the repository to my local machine.</p>

<p>* One thousand blessings to Dave Rice for being extremely patient with me when I made my first changes to the QCTools documentation by submitting weird pull requests even though he had given me permission to upload directly because I didn&rsquo;t know how to push directly to the master branch.</p>

<p><img class="center" src="/images/readme.png"></p>

<p>The main block of text on the front of a Github repository is located in the README.md file. (The .md stands for <a href="http://en.wikipedia.org/wiki/Markdown">Markdown</a>, a way to format writing on the web easily. (<a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet">cheatsheet here</a>)) If you click on the link, it&rsquo;ll take you to a page that only loads the README. On the right side, above the beginning of the document, there is a little pencil button. That pencil allows you to go in and edit the file without having to load the repository on your computer, use the command line, or even use the Github desktop GUI.</p>

<p><img class="center" src="/images/edit_pencil.png"></p>

<p>That&rsquo;s right, click on that pencil! You&rsquo;ll open into an in-browser text editor. It&rsquo;s pretty much the same as editing a wiki. Which you&rsquo;ve totally done, right? Just make your changes right in there. At the bottom, fill out a brief, one-line description of the change you made and why you made it and add a longer description if necessary. By the way, you can use emoji in here. Use <a href="http://emoji-cheat-sheet.com">this cheat sheet</a>.</p>

<p>When you click the &ldquo;Commit changes&rdquo; button, you&rsquo;ll get a notification from Github saying that you can&rsquo;t directly contribute to the code so it has forked the repository for you and has made your changes on your branch. Does that sound confusing? Forks, branches? It just means that you aren&rsquo;t allowed to directly change the code and there&rsquo;s a process in place to make sure that only good code goes in. Everything is copied to your account and you make the changes on YOUR account. If you want the changes to go into the main product, you have to submit a pull request (just follow the steps). It&rsquo;s a pull request because you are asking the owners of the main github page to &ldquo;pull in&rdquo; changes that you made on your copy of their main codebase.</p>

<p>Got a problem? Yo, you&rsquo;ll solve it! Check out this next step while the DJ revolves it:</p>

<p><img class="center" src="/images/diff.png"></p>

<p>The red is what I took away from the code and the green is what I added in.</p>

<p>After you submit a pull request, people can comment on it before it can get merged into the master branch. If the code change might cause a problem (or in the case of non-technical edits, if the documentation is wrong), conversations can happen here. This peer-review process helps keep open source projects strong and sturdy. Here is someone coming in to critique my simple edit soon after I opened the pull request on it for being too verbose:</p>

<p><img class="center" src="/images/codereview.png"></p>

<p>He was right, I could make the line even simpler and not even get into the fact that the code could run in another Terminal window, so I changed my change (the screencap above was taken after that). I even changed my change after this because it still had a lingering backtick in it, as you can see in this screencap. If you change something, you don&rsquo;t have to re-open a pull request. The pull request takes the latest version of your code on your branch and assumes it is ready to move into the master if the pull request is approved. At this point, all you can do is wait and feel good about your open source contribution.</p>

<p>If you want to add to the QCTools documentation, you can follow the same steps. With QCTools, the documentation is hidden a little deeper into the codebase, but you can find it <a href="https://github.com/bavc/qctools/tree/master/Source/Resource/Help">here in the Source</a>. You have to follow the rules and the code has to validate to proper HTML, but changes are easy and possible.</p>

<p>If you are afraid to make your change, go ahead and try to change anything on any of the repositories I own. I think I even have one called <a href="https://github.com/ablwr/testing">testing</a>. You can&rsquo;t test out submitting pull requests on your own github folders because you already own them (which was disappointing when I was trying to pull together screen caps for this demo).</p>

<p>If there’s something bigger you want to fix but you don’t know how to do it, you can open an issue. This may or may not be fulfilled and it might take a while to fulfill. Obviously the best way to fix a problem is by doing it yourself. But this is a good way to provide feedback on how something like QCTools works and bring up problems that might be easy to fix by someone else. You can see that QCTools has plenty of <a href="https://github.com/bavc/qctools/issues">open issues</a> at the moment.</p>

<p><img class="center" src="/images/issues.png"></p>

<p>The issues page is on the right-hand side of a Github repository. You can access it to see all the current issues or make your own.</p>

<p><img class="center" src="/images/issues2.png"></p>

<p>You can see Github has a lot of issues that I added to the repository earlier today. UX needs help, people! To create a new issue, click on the New Issue tab (I didn&rsquo;t need to explain that to you, did I?)</p>

<p><img class="center" src="/images/issues3.png"></p>

<p>To create a good issue that people will actually pay attention to, try to make the problem specific but concise. If it&rsquo;s a bug in the program, explain exactly what you were doing to cause the error to occur and make sure to mention if you are able to make the bug repeat, or if it only happened once and not again. If you know someone is in charge of a certain aspect of a project, assign them to it. If you don&rsquo;t know, though, don&rsquo;t assign anybody and someone in charge of the project can always direct the issue to the right person or someone else can jump in to fix it. Also, don&rsquo;t follow my above example and only submit an issue if it&rsquo;s something important that will help contribute overall to the betterment of the project.</p>

<p>A final note: One thing that guides to Github or Open Source contribution usually fail to mention is that it&rsquo;s scary. It&rsquo;s SCARY, dude. It involves being assertive, telling a total stranger that you think you have a better solution to their problem, and envoking feedback from anyone in the world that cares about the project. I don&rsquo;t have much advice for this other than BE BRAVE, close your eyes, and CLICK that button (or buttons) and don&rsquo;t worry if someone wants to try to get into a fight with you on the internet. The worst thing that can happen is that you&rsquo;re wrong, and that&rsquo;s okay too. And most people are exceptionally nice and willing to work it out with you (like Dave Rice).</p>

<p>The biggest advice I can give is don&rsquo;t worry about fucking things up. It&rsquo;s git. It&rsquo;s a distributed revision control system. It&rsquo;s entire purpose for existing is to protect against things getting fucked up.</p>

<p>Extra final note: I&rsquo;m leading a skillshare on git later this month so expect more git-based tutorials or resources to come!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Video Sprites]]></title>
    <link href="http://ablwr.github.io/blog/2014/10/15/video-sprites/"/>
    <updated>2014-10-15T15:16:15-04:00</updated>
    <id>http://ablwr.github.io/blog/2014/10/15/video-sprites</id>
    <content type="html"><![CDATA[<p>Last week, I participated in the second <a href="http://wiki.curatecamp.org/index.php?title=Association_of_Moving_Image_Archivists_%26_Digital_Library_Federation_Hack_Day_2014">AMIA AV Hack Day</a> and paired up with NCSU libriarian/developer Jason Ronallo, CNN archivist/engineer Nicholas Zoss, and CNN archivist/engineer/manager Jay Brown. Building on Ronallo&rsquo;s <a href="http://ronallo.com/blog/a-plugin-for-mediaelement-js-for-preview-thumbnails-on-hover-over-the-time-rail/">work with WebVTT and video scrolling thumbnails</a>, we created a Ruby gem that exports thumbnail images, thumbnail sprite image, and a WebVTT metadata file with synced media fragment URLs to thumbnails within the sprite. This could allow for the integration of video thumbnail creation to happen automatically within the web access video workflow. It is also easy to install and use, making it accessible to a wider audience (always a primary goal of mine).</p>

<p>One of the things I am most proud of is how seamlessly our team was able to distribute work and pair together when necessary. I was able to jump right in as the junior developer role, helping as support and Ruby syntax consultant, as well as filling out documentation and other smaller tasks. Jason Ronallo steered the ship, but welcomed many proofreading eyes to look over his code for debugging. Nick Zoss contributed plenty of engineering knowledge and helped do &ldquo;all the math parts.&rdquo; Jay Brown went to work finding and creating sample videos for testing the scripts and worked on general QA. And at the crucial end point of the day, I wrangled Dave Rice to quickly act as ffmpeg script consultant (a cool trick I learned and helped my team win one of the awards from <a href="http://wiki.curatecamp.org/index.php?title=Association_of_Moving_Image_Archivists_%26_Digital_Library_Federation_Hack_Day_2013">the first AV Hack Day</a>).</p>

<p>Anyway, let&rsquo;s get down to it! This is how the app works. It&rsquo;s EASY! After you <code>gem install video-sprites</code>, you can run it in your terminal (assuming you have ffmpeg and ImageMagick installed and working)</p>

<p>For example, I ran this: <code>video-sprites -i /Users/ashley/Development/kiss_from_a_rose.mpg -o /Users/ashley/Development</code></p>

<p>And I got this:</p>

<p><img class="center" src="/images/rose_export.png"></p>

<p>Simple, right? And check it out&hellip;</p>

<p>```
00:00:00.000 &mdash;> 00:00:05.000
<a href="http://example.com/kiss_from_a_rose-sprite-00001.jpg#xywh=0,0,200,133">http://example.com/kiss_from_a_rose-sprite-00001.jpg#xywh=0,0,200,133</a></p>

<p>00:00:05.000 &mdash;> 00:00:10.000
<a href="http://example.com/kiss_from_a_rose-sprite-00001.jpg#xywh=200,0,200,133">http://example.com/kiss_from_a_rose-sprite-00001.jpg#xywh=200,0,200,133</a></p>

<p>00:00:10.000 &mdash;> 00:00:15.000
<a href="http://example.com/kiss_from_a_rose-sprite-00001.jpg#xywh=400,0,200,133">http://example.com/kiss_from_a_rose-sprite-00001.jpg#xywh=400,0,200,133</a>
```</p>

<p>There&rsquo;s also this WebVTT file! If I replace the example.com with the website that is hosting the image sprite (or had I specified it when I ran the gem using the -u or &mdash;url flag), I could integrate it into a scrolling video thumbnail feature!</p>

<p>Play around with it yourself! The <a href="https://github.com/jronallo/video-sprites">code is up on Github</a> and we welcome feedback. Moving forward, there&rsquo;s a lot to do to keep this gem in tip-top shape and there are many features we plan to add. Like a good junior developer, I&rsquo;ve given myself the goal of writing tests to make it a healthy and happy gem. Oh, tests&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Open Source Software at the Association of Moving Image Archivists 2014 Conference]]></title>
    <link href="http://ablwr.github.io/blog/2014/10/13/open-source-software-at-the-association-of-moving-image-archivists-2014-conference/"/>
    <updated>2014-10-13T16:02:07-04:00</updated>
    <id>http://ablwr.github.io/blog/2014/10/13/open-source-software-at-the-association-of-moving-image-archivists-2014-conference</id>
    <content type="html"><![CDATA[<p>Last week, I attended the Association of Moving Image Archivists annual conference, held this year in Savannah, GA. And <em>y'all</em>, I continue to be impressed with all of the open source projects and contributions happening in the field!! I am so pleased to see it grow in significance every year (along with my knowledge and capabilities of wrangling these projects).</p>

<p>Here is a round-up of the technologies discussed during the conference and links to more information.</p>

<h2>Git</h2>

<ul>
<li><a href="http://git-scm.com/">Git</a> as a technology</li>
<li><a href="https://github.com/">Github</a> as a popular platform</li>
<li><a href="https://education.github.com/pack">Github student pack</a> &mdash; A bundle of great software offered by Github to students for free</li>
<li><a href="https://github.com/FredrikNoren/ungit">Ungit</a> &mdash; A version control visualizer</li>
</ul>


<h2>Technologies</h2>

<ul>
<li><a href="http://www.bittorrent.com/">BitTorrent</a> &mdash; Distributed filesharing</li>
<li><a href="https://www.ffmpeg.org/">ffmpeg</a> &mdash; Audio/video manipulation framework</li>
<li><a href="http://www.imagemagick.org/">ImageMagick</a> &mdash; Image manipulation framework</li>
<li><a href="http://www.openannotation.org/">Open Annotation</a> &mdash; Open source annotation</li>
<li><a href="https://www.websocket.org/">Web Sockets</a> &mdash; Or how Ronallo got those interactive slides</li>
<li><a href="http://dev.w3.org/html5/webvtt/">WebVTT</a> &mdash; Open subtitles for the web</li>
</ul>


<h2>Projects</h2>

<ul>
<li><a href="https://github.com/avpreserve/AMS">American Archives Project</a></li>
<li><a href="https://www.archivematica.org/wiki/Main_Page">Archivematica</a></li>
<li><a href="https://www.accesstomemory.org/en/">AtoM</a></li>
<li><a href="http://avaa.bavc.org/artifactatlas/index.php/A/V_Artifact_Atlas">AVAA</a></li>
<li><a href="https://github.com/avalonmediasystem">Avalon</a></li>
<li><a href="http://www.sno.phy.queensu.ca/~phil/exiftool/">ExifTool</a></li>
<li><a href="https://github.com/avpreserve/fixity">Fixity</a></li>
<li><a href="http://ffmprovisor.herokuapp.com">ffmprovisor</a></li>
<li><a href="https://archive.org/index.php">Internet Archive</a></li>
<li><a href="http://mediaarea.net/en/MediaInfo">MediaInfo</a></li>
<li><a href="https://github.com/projecthydra">Project Hydra</a></li>
<li><a href="https://github.com/bavc/qctools">QCTools</a></li>
<li><a href="http://openvault.wgbh.org/">WGBH Open Vault</a></li>
</ul>


<h2>Projects with open source sentiment</h2>

<ul>
<li><a href="https://github.com/epiil/tape-cleaner">Arduino tape cleaner</a></li>
<li><a href="http://calpreservation.org/projects/audiovisual-preservation/">California Audiovisual Preservation Project</a></li>
<li><a href="http://dmia.drupalgardens.com/">Digital Moving Image Archives Guide</a></li>
<li><a href="http://xfrcollective.wordpress.com/">XFR Collective</a></li>
</ul>


<h2>Hack Day!</h2>

<ul>
<li><a href="http://wiki.curatecamp.org/index.php?title=Association_of_Moving_Image_Archivists_%26_Digital_Library_Federation_Hack_Day_2014">Hack Day page</a></li>
<li><a href="https://github.com/amiaopensource/avspace">AV_Space</a></li>
<li><a href="https://github.com/amiaopensource/characterization_compare">characterization compare</a></li>
<li><a href="https://github.com/amiaopensource/hackdaycapture">hackdaycapture</a></li>
<li><a href="https://github.com/tessafallon/pbcorevalidator/">pbcorevalidator</a></li>
<li><a href="https://github.com/jronallo/video-sprites">Video Sprites!</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
