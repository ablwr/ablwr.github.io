<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails engage | BLOG Progress Process]]></title>
  <link href="http://ablwr.github.io/blog/categories/rails-engage/atom.xml" rel="self"/>
  <link href="http://ablwr.github.io/"/>
  <updated>2015-11-11T09:51:38-05:00</updated>
  <id>http://ablwr.github.io/</id>
  <author>
    <name><![CDATA[Ashley Blewer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails Engage: Cooking up an MVC]]></title>
    <link href="http://ablwr.github.io/blog/2015/02/02/rails-engage-cooking-up-an-mvc/"/>
    <updated>2015-02-02T21:14:34-05:00</updated>
    <id>http://ablwr.github.io/blog/2015/02/02/rails-engage-cooking-up-an-mvc</id>
    <content type="html"><![CDATA[<p><img class="center <a" src="href="http://i183.photobucket.com/albums/x54/TrueX-Ray/TNG%20Caption%20This/TNGCaption158e.jpg">http://i183.photobucket.com/albums/x54/TrueX-Ray/TNG%20Caption%20This/TNGCaption158e.jpg</a>"></p>

<p>Okay! Last time we talked about the magic of <code>rails generate</code> and the structure that gets created when you make a new Rails project. I gave you a soft warning to pay close attention to the app/ folder with the foreboding &ldquo;Just remember the MVC&rdquo;&hellip; Now let&rsquo;s talk about the MVC.</p>

<p>I&rsquo;m not the only person to use this analogy, but here it goes and I know you&rsquo;ll be able to relate to it. The best way I&rsquo;ve found to understand MVC is to treat the framework like a restaurant.</p>

<p>The restaurant is broken up into three parts: Chefs working behind the scenes to make a great meal, servers that deliver the meal to the customers so they can eat it, and plates/tables/utensils so the meal can be enjoyed. Your app is THE MEAL!</p>

<p><strong>Models</strong> &mdash; <strong>Chefs</strong></p>

<p>Models hold the code. They hold the logic. They are the brains of the operation. A master chef has to take all of the individual pieces of something and put them together just right to make something delicious.</p>

<p><strong>Controllers</strong> &mdash; <strong>Servers</strong></p>

<p>The chef is too busy making a masterpiece to give her customers the meal herself! She&rsquo;s got work to do! The controllers help keep all the beautiful, well-crafted meals going out to the right customers. Being a server (the restaurant kind) is hard work, keeping track of what everyone ordered and where they are seated. The controller takes data from the model and delivers it to the plate.</p>

<p><strong>Views</strong> &mdash; <strong>Plates</strong></p>

<p>Yum yum, time to eat these snacks up, right? The view is where all the front-end work comes into play. It&rsquo;s a very important component because just because you have a delicious meal, no one is gonna come to your restaurant if its lookin' like the Wing Basket. Or maybe they will and it&rsquo;ll be the best kept secret in town. Anyway, the view is dedicated to make all your hard work and code look great so people will actually want to consume it.</p>

<p>MVC is a good framework to know, but what&rsquo;s the point? The point is to keep your code clean. Coding means juggling a lot of different things at once, so this framework helps you figure out where you need to go to find your problem and fix it. Is your math not working? Check your models. Is the math being delivered to the wrong page? Check your controllers. Is the math problem just super ugly? Take a look at your views.</p>

<p>There a lot of nuances here, but this is a good overview to have in the back of your mind as you write code. And remember, the first goal is to get things working so if you accidentally put some logic in your view, don&rsquo;t sweat it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Engage: rails generate]]></title>
    <link href="http://ablwr.github.io/blog/2015/01/24/rails-engage-rails-generate/"/>
    <updated>2015-01-24T12:24:23-05:00</updated>
    <id>http://ablwr.github.io/blog/2015/01/24/rails-engage-rails-generate</id>
    <content type="html"><![CDATA[<p><img class="center <a" src="href="http://31.media.tumblr.com/d619155808e29c0d5005f4f663d11114/tumblr_mjfgq0AcrB1qd5tdto1_250.gif">http://31.media.tumblr.com/d619155808e29c0d5005f4f663d11114/tumblr_mjfgq0AcrB1qd5tdto1_250.gif</a>"></p>

<p>Rails comes with a lot of magic. When I was learning Ruby and Ruby on Rails, I was taught Ruby first, moved up slowly, and then was shown that all the things I did the hard way could be done by typing “rails generate” (or even just “rails g”!). I think the way I learned was good, but listen — we don’t have time for that right now, so we are just going to throw out this command and I will explain to you what it does. The deeper concepts can come later, but right now the most important thing is to get our hands dirty right away and generate a lot of code.</p>

<p>“rails generate” makes a lot of assumptions about what you might want in a robust web application and it generates things accordingly. There are more one-liners that can be used later to continue to expand your application as you need them.</p>

<p>The first command is <code>rails new</code>. <code>rails</code> tells your computer to use that code base and <code>new</code> is the command to generate a whole bunch of pre-written template code. You&rsquo;ll need one more thing after that, and it&rsquo;s your app name. So <code>rails new marleigh</code> will make all of those files generate in a folder called marleigh <em>in whatever directory you are currently in</em>. Make sure you know where you are in your terminal when you make this folder so you can find it again! If you aren&rsquo;t sure where you are, you can type <code>pwd</code>. That stands for &ldquo;print working directory.&rdquo;</p>

<p>So <code>rails new</code> makes a lot of stuff. Do you need all of it? No. Shouldn&rsquo;t you be writing beautiful, minimalist, clean code from the very beginning? No. You will have plenty of time to craft elegant code in the future, but right now let&rsquo;s just get something running. It&rsquo;s easy to get caught up the former and never get to the latter.</p>

<p><img class="left" src="/images/base_rails.png"></p>

<p>But what do we get?</p>

<p>On the left is an image of what gets generated when you run that one line. That&rsquo;s a lot of stuff! When I was cruising around on Github before learning anything about Rails, all of these files and folders scared the hell out of me. I also assumed they were all generated manually and that everyone knew everything about what all of these files and folders did and I had no idea where to look and I&rsquo;d never get anything right and was just a big dum-dum. That&rsquo;s wrong.</p>

<p>Here&rsquo;s what&rsquo;s right.</p>

<p><img class="center <a" src="href="http://33.media.tumblr.com/4256f4276b3aa11c3caf98a574a58296/tumblr_mjfgq0AcrB1qd5tdto5_250.gif">http://33.media.tumblr.com/4256f4276b3aa11c3caf98a574a58296/tumblr_mjfgq0AcrB1qd5tdto5_250.gif</a>"></p>

<p><strong>app</strong> &mdash; Most of your code will be written in this folder. It contains the models, controllers, and views, which are at the heart of the Rails framework. Another important folder within this one is the assets folder. There are other folders, too, but they are not required and you can ignore them for now. Just remember the MVC &mdash; we&rsquo;ll go into that later when we start writing. The assets folder is for putting your custom CSS, JavaScript, and images.</p>

<p><strong>bin</strong> &mdash; The code in this folder helps start up your app. If you have other things helping you out, they may needed to be booted up in here along with Rails. From the start, it&rsquo;ll have what you need to get things running.</p>

<p><strong>config</strong> &mdash; The config folder also gives you what you need to get off the ground, but very useful if you need to make modifications in the future, like because you are using a different server and need to change the database.yml file. There is one very important file in here, though, and it&rsquo;s routes.rb. You will be using it even for a basic application.</p>

<p><strong>db</strong> &mdash; Your database lives in this folder! seeds.rb is for populating seed data when you are testing.</p>

<p><strong>lib</strong> &mdash; Other libraries go here.</p>

<p><strong>log</strong> &mdash; Log files! You probably won&rsquo;t need to look at these very much initially, but be glad they are there.</p>

<p><strong>public</strong> &mdash; This is the only public part of your site. The rest of it is all hidden. Error pages, rules for robots like web scrapers, and your favicon (the tiny icon in the tab- section of your browser) live here by default.</p>

<p><strong>test</strong> &mdash; An important component to writing code is writing tests to make sure that code works. I&rsquo;m not gonna help you learn how to write tests, though.</p>

<p><strong>tmp</strong> &mdash; Don&rsquo;t worry about it. Just a spot for temporary files.</p>

<p><strong>vendor</strong> &mdash; This is where you put code libraries from other places, like if you use Bootstrap or a JavaScript library. It&rsquo;s the same as putting it in the Assets folder in /app but it&rsquo;s polite to put code you didn&rsquo;t write or generate into this folder. It also helps keep you organized.</p>

<p><strong>config.ru</strong> &mdash; The ru stands for rackup. This configures the application for use with Rack-based servers. It&rsquo;s set up as default.</p>

<p><strong>Gemfile</strong> &mdash; If your app uses other gems (Ruby libraries) to accomplish tasks, the names of those gems should go here so that it can be easily loaded by anyone wanting to use the application. The Gemfile.lock file is created after it is &ldquo;bundled.&rdquo;</p>

<p><strong>Rakefile</strong> &mdash; If you find yourself doing a task frequently and want to automate it, you can turn it into a rake task. If you have one of those, you can put it here so that it loads along with your application.</p>

<p><strong>.gitignore</strong> &mdash; This is where you put files that you don&rsquo;t want to upload to git. This is in all git repositories, but Rails auto-populates it with stuff you never need to load to a public git directory.</p>

<p><strong>README</strong> &mdash; Documentation is important. This is a good place to put information about your app and how to use it.</p>

<p><img class="center <a" src="href="http://33.media.tumblr.com/7a224527d4b66b9987bb912262058de1/tumblr_mjfgq0AcrB1qd5tdto4_250.gif">http://33.media.tumblr.com/7a224527d4b66b9987bb912262058de1/tumblr_mjfgq0AcrB1qd5tdto4_250.gif</a>"></p>

<p>It&rsquo;s still a lot all at once, right? And how do those pieces even work together?! That&rsquo;ll be what we go into next when we start writing code. A lot of this stuff <em>is</em> excessive for what you want to do, but it helps us get to the fun stuff right away.</p>

<p>The first link in the resources is great at explaining all of this in detail, so I recommend going over it (and over it and over it) to have a good understanding of how these parts work together.</p>

<p><img class="center <a" src="href="http://38.media.tumblr.com/8892c95636fd67bb843da6aa79c1ded4/tumblr_mjfgq0AcrB1qd5tdto2_250.gif">http://38.media.tumblr.com/8892c95636fd67bb843da6aa79c1ded4/tumblr_mjfgq0AcrB1qd5tdto2_250.gif</a>"></p>

<h3>Resources</h3>

<p><a href="http://guides.rubyonrails.org/getting_started.html">Getting Started with Rails</a></p>

<p><a href="https://upcase.com/trails">Thoughtbot&rsquo;s Learn Rails</a></p>

<p><a href="https://github.com/petrjasek/rails-portfolio">Rails Portfolio</a></p>

<p><a href="http://rails-3-2.railstutorial.org/book">Ruby on Rails Tutorial</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Engage: Scoping]]></title>
    <link href="http://ablwr.github.io/blog/2015/01/18/rails-engage-scoping/"/>
    <updated>2015-01-18T15:41:11-05:00</updated>
    <id>http://ablwr.github.io/blog/2015/01/18/rails-engage-scoping</id>
    <content type="html"><![CDATA[<p><img class="center" src="/images/guinan_gun.gif" title="" > <img class="center" src="/images/guinan_gun2.gif" title="" ></p>

<p>When you’re making your first app, it’s hard to think about scope because it’s hard to know what is and isn’t possible. Some things that seem easy are hard, and vice versa. Marleigh mentioned an idea to me and fortunately it happened to be exactly the right size for a first-app: complex enough to cover all the concepts you need to be a great junior developer but simple enough to be able to tackle as a junior developer.</p>

<p>I don’t want to give away her project idea, but when she told me what she wanted to build, I was able to break it down like this: Possible to execute in one or two pages, involves at least one API, logic is relatively simple but requires insight that she already has, database is not complex, is something she is personally interested in.</p>

<p>Here are a few things to try to keep in mind when planning out your first project:</p>

<ol>
<li>Keep it simple. Absolutely simple. There is a chance it’ll be too simple, but it’s more likely that you will think of something that has a lot more moving parts than you’d expect.</li>
<li>Can this be done in one or two pages?</li>
<li>Logic. Can you figure out how to figure something out in advance? If you don’t know the answer, how are you going to be able to code it? One of the first apps I made involved a weather API and logic that would determine whether or not the average threshold for rainfall would exceed a certain limit, so you’d know whether or not you’d need an umbrella in the morning (and the application would fire a text only if that was the case). That was something my team could easily figure out. You’ll be worried about figuring out a lot of stuff, so don’t make a complex problem part of it. There’s nothing wrong with ripping off something that already exists because the important part is your learning.</li>
<li>Be interested. Be something you actually want to use and be proud of. This is kind of a no-brainer because you’re obviously making this app for you in your spare time while learning how to code, but it’s worth emphasizing. Do something related to what you love.</li>
</ol>


<p>Scoping is hard whether you are a junior or a senior developer: there&rsquo;s always going to be hiccups that you didn&rsquo;t expect or things that were much easier than anticipated. It gets easier, but it will never be easy (kinda like programming, if you&rsquo;re doing it right).</p>

<p>Bonus points: APIs. This is also good for thinking up an idea: find an API that is well-made and build something based on it. You certainly don’t need to use an API for your app but I can tell you that when I was interviewing for my first developer job out of school, APIs were a hot topic. (A lot of questions about whether I’d made my own before.)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Engage: Setting up your environment]]></title>
    <link href="http://ablwr.github.io/blog/2015/01/11/rails-engage-setting-up-your-environment/"/>
    <updated>2015-01-11T09:11:48-05:00</updated>
    <id>http://ablwr.github.io/blog/2015/01/11/rails-engage-setting-up-your-environment</id>
    <content type="html"><![CDATA[<p><img src="http://38.media.tumblr.com/f360873af12a76bc4b00a549c799a2d1/tumblr_mtayo9M8JJ1rik14zo1_400.gif" alt="Data using a computer" /></p>

<p><img src="http://38.media.tumblr.com/bb28f80f960d040e9d2842fed6d20ab9/tumblr_mtayo9M8JJ1rik14zo3_400.gif" alt="Data using a computer fast" /></p>

<p> Disclaimer: I love this part. I love setting up environments, I love debugging problems on the command line*, and I love working on server-side problems. Ever since I was a kid. Weird, right? Most people don’t feel that way (or lacked the opportunity). And it’s hella intimidating to start your coding journey by having to stare at a huge black screen* that you don’t understand. I also used DOS when I started using computers, so it was comforting to me, a familiar screen, and even working in the terminal* now gives me this strong sense of nostalgia for childhood. SO NERDY. Most people have only used graphical user interfaces to interact with their computer, so typing things into the shell* is definitely weird.</p>

<p>Weird and scary. Because you&rsquo;re looking at an empty black box, typing into the darkness, it can be intimidating because of a slight fear that you&rsquo;ll do something wrong and ruin your entire computer. This is highly, highly, highly unlikely. Everyone starting out gets the disclaimer of being wary of commands that start with <code>rm</code> (remove), and you could end up in black holes that takes a few hours to get out of because of debugging, but be brave and go forth! Environment problems don&rsquo;t take a long time because you are stupid. They take a long time because the computer is stupid and needs explicit instructions.</p>

<p>It seems like programming is a lot like the opening gif, up above. You don&rsquo;t have to be Commander Data to use the command line, though. And a lot of environment setup involves pressing a button and waiting a while. We&rsquo;re gonna have you up and running like this&hellip; in theory.</p>

<p><img src="http://38.media.tumblr.com/ed6df7c82c24e812dfe3c5892a65bcb8/tumblr_mohoyw4X0l1s67vyfo4_250.gif" alt="Data pressing a button" /></p>

<p>The final and most difficult part about setup is that in theory it’s easy. In theory, you just run a few lines and everything is totally fine and your computer is like :) complete! :) installed! :) good! :). But most of the time, you get some crazy  jargon.</p>

<p>First rule: Read what the computer gives back to you! This is the best thing you can learn from setting up your environment (assuming you run into problems). Your computer will tell you what’s wrong. Sometimes it’s good at articulating its feelings. Sometimes its not so good. It just a computer, after all. It doesn’t really have feelings. But when you get an error message, don’t panic!</p>

<p>Second step: If you have no idea what the computer is trying to tell you, google it. Google the shit out of it. Copy-paste that shit right into google and you’re most likely to get a link to StackOverflow with someone else that had your same problem. Especially when you’re learning early on — at least one person, usually many people, have had the same problems you are having right now. And some kind person out there, again usually on StackOverflow, has already gently explained the right thing to do in order to fix it. If you don’t understand what they are saying, keep scrolling or start googling what they are saying. Just google forever. Or use your preferred search engine.</p>

<p>Enough of these steps, let&rsquo;s get practical. Pop open that terminal open! (Use Spotlight to search for Terminal, or you can find Terminal.app in your applications folder <strong>in the Utilities folder</strong>). Windows users, sorry I am leaving you in the dust here.</p>

<p>First, let&rsquo;s install <a href="http://brew.sh/">Homebrew</a>. Follow the commands on the page and listen to anything the command line gives back to you. Homebrew is great. It&rsquo;s a package manager. What does that mean? It means you can add things to your computer that you need without having to do all the work yourself, or running into problems. So when you want to install a new programming lanuage or component, you can do it with one line. Overall, from a new-user perspective, it helps protect your machine from you. It makes command-lining like a wild beast (as a new user) much safer.</p>

<p><img src="http://emojipedia.org/wp-content/uploads/2013/07/160x160xbeer-mug.png.pagespeed.ic.kOjM-Un-7l.jpg" alt="beer" /></p>

<p>I think you might need to install X-Code. This will vary based on your operating system. See the resources below if you have trouble doing this.</p>

<p>When Homebrew is up and running, you can use it to install Ruby, RVM (this manages), and Rails by running <code>brew install</code> and the thing you want to install. Rather than repeating how to do this from memory, I recommend following the guides I link to at the bottom of this post.</p>

<p>* I realize that people commonly use several words to refer to the same thing: that black (by default) screen you use to manipulate your computer, with only text on it. On OS X (Mac) operating systems, the application is called <strong>Terminal</strong>. Inside, it uses the <strong>shell</strong> (Unix term for a user interface for accessing your computer). There are a few language structures used in shell, but the most common (and default) is called <strong>bash</strong> (which is a free, open-source alternative of the Bourne shell, which is why bash stands for Bourne-again-shell). All of this brings together the ability to manipulate your computer via the <strong>command-line</strong> (as opposed to using your mouse to click where you want to go — that uses the graphical user interface).</p>

<p>Windows is a different beast, of course, but it might be the beast you are stuck with. On Windows, you are looking for the Command Prompt (found via this path: Start > All Programs > Accessories > Command Prompt, if I recall correctly).</p>

<p><img src="http://emojipedia.org/wp-content/uploads/2013/07/160x160xclinking-beer-mugs.png.pagespeed.ic.Gv-8d6e0qe.jpg" alt="clinking beer" /></p>

<p>Although most learning can be done alone, it&rsquo;s a bit of a bummer that setting up the environment is like being forced to dive head-first into the deep end without even ever having been in the water before, much less know how to swim. If you are a non-Marleigh following along with these posts, it&rsquo;s best to try to find a friend or resource that can sit next to you and explain things. If you have no friends (that know about this stuff), you can ask me! But remember firstly that search engines are also your friend.</p>

<h3>Resources:</h3>

<p><a href="http://www.moncefbelyamani.com/how-to-install-xcode-homebrew-git-rvm-ruby-on-mac/">How to Install Xcode, Homebrew, Git, RVM, Ruby &amp; Rails</a></p>

<p><a href="http://braumeister.org/">Braumeister &mdash; list of different brew packages</a></p>

<p><a href="https://developer.apple.com/xcode/">X-Code</a></p>

<p><a href="http://guides.rubyonrails.org/getting_started.html">Rails Guide: Getting Started with Rails</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Engage!]]></title>
    <link href="http://ablwr.github.io/blog/2015/01/10/rails-engage/"/>
    <updated>2015-01-10T20:36:19-05:00</updated>
    <id>http://ablwr.github.io/blog/2015/01/10/rails-engage</id>
    <content type="html"><![CDATA[<p><img src="/images/tng-engage.gif" alt="engage picard" /></p>

<p>Happy new year.</p>

<ol>
<li>I have a friend who wants to learn how to code.</li>
<li>She has an app in mind that she wants to create.</li>
<li>One of my goals for the new year is to write more technical blog posts.</li>
</ol>


<p>We also live pretty far apart — I live in New York and she lives in my home state of South Carolina (at least, for now). I think one of the best ways to help her make her app is to write blog posts explaining some of the concepts that were new to me when I was learning how to code. Ruby on Rails is one of the easiest frameworks to learn for a couple of reasons: it teaches you the core concepts of programming for the web, Ruby is one of the easiest languages to learn as a beginner (if not the easiest), and Rails is robust enough to get a fully functioning application off the ground in the matter of a few weeks, even for people new to coding. And it’s just easier for me to write if I can pretend like I’m speaking to one person directly.</p>

<p>Another important note: my friend is a real Star Trek: The Next Generation nerd, so if you see an obtuse amount of TNG references and gifs on this blog in the near future&hellip; that is why.</p>

<p>Here’s the rough framework I will use to explain how to make an app while keeping it general enough for anyone (and obviously subject to change).</p>

<ol>
<li><a href="http://ablwr.github.io/blog/2015/01/11/rails-engage-setting-up-your-environment/">Environment setup</a>
1.5 <a href="http://ablwr.github.io/blog/2015/01/18/rails-engage-scoping/">Scoping</a></li>
<li><a href="http://ablwr.github.io/blog/2015/01/24/rails-engage-rails-generate/">rails generate (What are these files?)</a></li>
<li>Eaten by 2</li>
<li>MVC</li>
<li>Working with an API</li>
<li>Logic</li>
<li>Front-end</li>
<li>How to deploy</li>
</ol>


<p>Engage!</p>
]]></content>
  </entry>
  
</feed>
