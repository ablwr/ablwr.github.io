<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[BLOG Progress Process]]></title>
  <link href="http://ablwr.github.io/atom.xml" rel="self"/>
  <link href="http://ablwr.github.io/"/>
  <updated>2014-11-13T19:13:18-05:00</updated>
  <id>http://ablwr.github.io/</id>
  <author>
    <name><![CDATA[Ashley Blewer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Fog Creek Fellowship Mini-post]]></title>
    <link href="http://ablwr.github.io/blog/2014/11/08/fog-creek-fellowship-mini-post/"/>
    <updated>2014-11-08T09:04:18-05:00</updated>
    <id>http://ablwr.github.io/blog/2014/11/08/fog-creek-fellowship-mini-post</id>
    <content type="html"><![CDATA[<p>I had a great time at Fog Creek getting mentorship from the Trello team but haven&rsquo;t had time to sit down and put it all into words. Fortunately, they say a picture is worth a thousand words.</p>

<!-- more -->


<p><img class="center" src="http://ablwr.github.io/images/fogcreekfellowship_first.gif"></p>

<p>Because this is a vaguely code-focused blog, I must add that one command is worth a thousand seconds screwing around with Photoshop. With ImageMagick, I just ran <code>convert -delay 20 -loop 0 image*.jpeg fellowship.gif</code> in each folder of images.</p>

<p>The finest quality .gif is still gonna come out of some dedicated Photoshopping, but this works fine in a pinch.</p>

<p><img class="center" src="http://ablwr.github.io/images/fogcreekfellowship_second.gif"></p>

<p>These gifs are pretty jumbo (despite mediocre quality), which I don&rsquo;t care about but are cruel to slower connections or mobile platforms. ImageMagick can help with that, too, because <a href="www.imagemagick.org">ImageMagick</a> can do pretty much everything. I mean, it&rsquo;s a wizard.</p>

<p><img class="center" src="http://upload.wikimedia.org/wikipedia/commons/0/0d/Imagemagick-logo.png"></p>

<p><code>convert fellowship.gif -resize 50% fellowship_small.gif</code> is a quick way to make a smaller copy of an image. There&rsquo;s a zillion other things you can do that I&rsquo;m not going to go into because the primary point of this post is two simple gifs, but <a href="http://www.imagemagick.org/script/command-line-options.php">documentation</a> is always your pal, and so is <a href="http://stackoverflow.com/search?q=imagemagick">Stack Overflow</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Non-technical person's guide to becoming an open source software contributor via Github]]></title>
    <link href="http://ablwr.github.io/blog/2014/11/03/non-technical-persons-guide-to-becoming-an-open-source-software-contributor-via-github/"/>
    <updated>2014-11-03T21:53:42-05:00</updated>
    <id>http://ablwr.github.io/blog/2014/11/03/non-technical-persons-guide-to-becoming-an-open-source-software-contributor-via-github</id>
    <content type="html"><![CDATA[<p>A month ago, I was (lightly, &hellip;I think) called out for bailing on speaking about <a href="www.bavc.org/qctools">QCTools</a> for the Association of Moving Image Archivists conference. Nevermind the bait-and-switch last-minute-surprise-you’re-speaking scenario I had landed myself in and that I really really did want to see my pals give a talk on BitTorrent and private tracker communities as archives, I did still feel a twinge of guilt for dropping out last minute. Sorry, guys. The BitTorrent panel was pretty baller, though, and Lauren Sorensen did an excellent survey of using git from the command line earlier in the day.</p>

<p>To make up for it, I am here today on this blog to talk about how you, non-technical or kinda-technical or just-scared-of-git person, can dig in and support open source projects like QCTools, even if you don’t speak C++ (which is what I started planning for in the 2-day scramble before leaving New York on a jet plane).</p>

<p>Here it is:</p>

<p>I think a lot of people are intuitively intimidated by using git because it can be hard to understand or because they don’t know how to read code. But not being able to read code is okay because you can still make valuable contributions in English! One of the biggest sore spots for most open source software (and even proprietary software) is a lack of clear, concise documentation. But at least with OSS, if something in the documentation is confusing, instead of going on Twitter or something and being like “wah wah this free thing I downloaded totally sucks,” you can actually go in there and CHANGE it. Or at least make a request to change it.</p>

<p>I’m gonna go through how you might make those changes without having to do anything “techy.”</p>

<p>Uh, so I went to the Flatiron School which is an immersive web development program. This is how I did things on Day 1 as a shortcut to getting what I wanted (which was to deploy a user profile for myself)*. I can’t get away with that stuff now but you totally can. It’s not bad practice or anything (well, maybe the context in which I was doing it was, but that&rsquo;s neither here nor there). Actually, I did a quick edit like this today because I wanted to fix someone else’s documentation but I didn’t want to bother going through all the other steps to copy and download the repository to my local machine.</p>

<p>* One thousand blessings to Dave Rice for being extremely patient with me when I made my first changes to the QCTools documentation by submitting weird pull requests even though he had given me permission to upload directly because I didn&rsquo;t know how to push directly to the master branch.</p>

<p><img class="center" src="http://ablwr.github.io/images/readme.png"></p>

<p>The main block of text on the front of a Github repository is located in the README.md file. (The .md stands for <a href="http://en.wikipedia.org/wiki/Markdown">Markdown</a>, a way to format writing on the web easily. (<a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet">cheatsheet here</a>)) If you click on the link, it&rsquo;ll take you to a page that only loads the README. On the right side, above the beginning of the document, there is a little pencil button. That pencil allows you to go in and edit the file without having to load the repository on your computer, use the command line, or even use the Github desktop GUI.</p>

<p><img class="center" src="http://ablwr.github.io/images/edit_pencil.png"></p>

<p>That&rsquo;s right, click on that pencil! You&rsquo;ll open into an in-browser text editor. It&rsquo;s pretty much the same as editing a wiki. Which you&rsquo;ve totally done, right? Just make your changes right in there. At the bottom, fill out a brief, one-line description of the change you made and why you made it and add a longer description if necessary. By the way, you can use emoji in here. Use <a href="http://emoji-cheat-sheet.com">this cheat sheet</a>.</p>

<p>When you click the &ldquo;Commit changes&rdquo; button, you&rsquo;ll get a notification from Github saying that you can&rsquo;t directly contribute to the code so it has forked the repository for you and has made your changes on your branch. Does that sound confusing? Forks, branches? It just means that you aren&rsquo;t allowed to directly change the code and there&rsquo;s a process in place to make sure that only good code goes in. Everything is copied to your account and you make the changes on YOUR account. If you want the changes to go into the main product, you have to submit a pull request (just follow the steps). It&rsquo;s a pull request because you are asking the owners of the main github page to &ldquo;pull in&rdquo; changes that you made on your copy of their main codebase.</p>

<p>Got a problem? Yo, you&rsquo;ll solve it! Check out this next step while the DJ revolves it:</p>

<p><img class="center" src="http://ablwr.github.io/images/diff.png"></p>

<p>The red is what I took away from the code and the green is what I added in.</p>

<p>After you submit a pull request, people can comment on it before it can get merged into the master branch. If the code change might cause a problem (or in the case of non-technical edits, if the documentation is wrong), conversations can happen here. This peer-review process helps keep open source projects strong and sturdy. Here is someone coming in to critique my simple edit soon after I opened the pull request on it for being too verbose:</p>

<p><img class="center" src="http://ablwr.github.io/images/codereview.png"></p>

<p>He was right, I could make the line even simpler and not even get into the fact that the code could run in another Terminal window, so I changed my change (the screencap above was taken after that). I even changed my change after this because it still had a lingering backtick in it, as you can see in this screencap. If you change something, you don&rsquo;t have to re-open a pull request. The pull request takes the latest version of your code on your branch and assumes it is ready to move into the master if the pull request is approved. At this point, all you can do is wait and feel good about your open source contribution.</p>

<p>If you want to add to the QCTools documentation, you can follow the same steps. With QCTools, the documentation is hidden a little deeper into the codebase, but you can find it <a href="https://github.com/bavc/qctools/tree/master/Source/Resource/Help">here in the Source</a>. You have to follow the rules and the code has to validate to proper HTML, but changes are easy and possible.</p>

<p>If you are afraid to make your change, go ahead and try to change anything on any of the repositories I own. I think I even have one called <a href="https://github.com/ablwr/testing">testing</a>. You can&rsquo;t test out submitting pull requests on your own github folders because you already own them (which was disappointing when I was trying to pull together screen caps for this demo).</p>

<p>If there’s something bigger you want to fix but you don’t know how to do it, you can open an issue. This may or may not be fulfilled and it might take a while to fulfill. Obviously the best way to fix a problem is by doing it yourself. But this is a good way to provide feedback on how something like QCTools works and bring up problems that might be easy to fix by someone else. You can see that QCTools has plenty of <a href="https://github.com/bavc/qctools/issues">open issues</a> at the moment.</p>

<p><img class="center" src="http://ablwr.github.io/images/issues.png"></p>

<p>The issues page is on the right-hand side of a Github repository. You can access it to see all the current issues or make your own.</p>

<p><img class="center" src="http://ablwr.github.io/images/issues2.png"></p>

<p>You can see Github has a lot of issues that I added to the repository earlier today. UX needs help, people! To create a new issue, click on the New Issue tab (I didn&rsquo;t need to explain that to you, did I?)</p>

<p><img class="center" src="http://ablwr.github.io/images/issues3.png"></p>

<p>To create a good issue that people will actually pay attention to, try to make the problem specific but concise. If it&rsquo;s a bug in the program, explain exactly what you were doing to cause the error to occur and make sure to mention if you are able to make the bug repeat, or if it only happened once and not again. If you know someone is in charge of a certain aspect of a project, assign them to it. If you don&rsquo;t know, though, don&rsquo;t assign anybody and someone in charge of the project can always direct the issue to the right person or someone else can jump in to fix it. Also, don&rsquo;t follow my above example and only submit an issue if it&rsquo;s something important that will help contribute overall to the betterment of the project.</p>

<p>A final note: One thing that guides to Github or Open Source contribution usually fail to mention is that it&rsquo;s scary. It&rsquo;s SCARY, dude. It involves being assertive, telling a total stranger that you think you have a better solution to their problem, and envoking feedback from anyone in the world that cares about the project. I don&rsquo;t have much advice for this other than BE BRAVE, close your eyes, and CLICK that button (or buttons) and don&rsquo;t worry if someone wants to try to get into a fight with you on the internet. The worst thing that can happen is that you&rsquo;re wrong, and that&rsquo;s okay too. And most people are exceptionally nice and willing to work it out with you (like Dave Rice).</p>

<p>The biggest advice I can give is don&rsquo;t worry about fucking things up. It&rsquo;s git. It&rsquo;s a distributed revision control system. It&rsquo;s entire purpose for existing is to protect against things getting fucked up.</p>

<p>Extra final note: I&rsquo;m leading a skillshare on git later this month so expect more git-based tutorials or resources to come!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Video Sprites]]></title>
    <link href="http://ablwr.github.io/blog/2014/10/15/video-sprites/"/>
    <updated>2014-10-15T15:16:15-04:00</updated>
    <id>http://ablwr.github.io/blog/2014/10/15/video-sprites</id>
    <content type="html"><![CDATA[<p>Last week, I participated in the second <a href="http://wiki.curatecamp.org/index.php?title=Association_of_Moving_Image_Archivists_%26_Digital_Library_Federation_Hack_Day_2014">AMIA AV Hack Day</a> and paired up with NCSU libriarian/developer Jason Ronallo, CNN archivist/engineer Nicholas Zoss, and CNN archivist/engineer/manager Jay Brown. Building on Ronallo&rsquo;s <a href="http://ronallo.com/blog/a-plugin-for-mediaelement-js-for-preview-thumbnails-on-hover-over-the-time-rail/">work with WebVTT and video scrolling thumbnails</a>, we created a Ruby gem that exports thumbnail images, thumbnail sprite image, and a WebVTT metadata file with synced media fragment URLs to thumbnails within the sprite. This could allow for the integration of video thumbnail creation to happen automatically within the web access video workflow. It is also easy to install and use, making it accessible to a wider audience (always a primary goal of mine).</p>

<p>One of the things I am most proud of is how seamlessly our team was able to distribute work and pair together when necessary. I was able to jump right in as the junior developer role, helping as support and Ruby syntax consultant, as well as filling out documentation and other smaller tasks. Jason Ronallo steered the ship, but welcomed many proofreading eyes to look over his code for debugging. Nick Zoss contributed plenty of engineering knowledge and helped do &ldquo;all the math parts.&rdquo; Jay Brown went to work finding and creating sample videos for testing the scripts and worked on general QA. And at the crucial end point of the day, I wrangled Dave Rice to quickly act as ffmpeg script consultant (a cool trick I learned and helped my team win one of the awards from <a href="http://wiki.curatecamp.org/index.php?title=Association_of_Moving_Image_Archivists_%26_Digital_Library_Federation_Hack_Day_2013">the first AV Hack Day</a>).</p>

<p>Anyway, let&rsquo;s get down to it! This is how the app works. It&rsquo;s EASY! After you <code>gem install video-sprites</code>, you can run it in your terminal (assuming you have ffmpeg and ImageMagick installed and working)</p>

<p>For example, I ran this: <code>video-sprites -i /Users/ashley/Development/kiss_from_a_rose.mpg -o /Users/ashley/Development</code></p>

<p>And I got this:</p>

<p><img class="center" src="http://ablwr.github.io/images/rose_export.png"></p>

<p>Simple, right? And check it out&hellip;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>00:00:00.000 --&gt; 00:00:05.000
</span><span class='line'>http://example.com/kiss_from_a_rose-sprite-00001.jpg#xywh=0,0,200,133
</span><span class='line'>
</span><span class='line'>00:00:05.000 --&gt; 00:00:10.000
</span><span class='line'>http://example.com/kiss_from_a_rose-sprite-00001.jpg#xywh=200,0,200,133
</span><span class='line'>
</span><span class='line'>00:00:10.000 --&gt; 00:00:15.000
</span><span class='line'>http://example.com/kiss_from_a_rose-sprite-00001.jpg#xywh=400,0,200,133</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;s also this WebVTT file! If I replace the example.com with the website that is hosting the image sprite (or had I specified it when I ran the gem using the -u or &mdash;url flag), I could integrate it into a scrolling video thumbnail feature!</p>

<p>Play around with it yourself! The <a href="https://github.com/jronallo/video-sprites">code is up on Github</a> and we welcome feedback. Moving forward, there&rsquo;s a lot to do to keep this gem in tip-top shape and there are many features we plan to add. Like a good junior developer, I&rsquo;ve given myself the goal of writing tests to make it a healthy and happy gem. Oh, tests&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Open Source Software at the Association of Moving Image Archivists 2014 Conference]]></title>
    <link href="http://ablwr.github.io/blog/2014/10/13/open-source-software-at-the-association-of-moving-image-archivists-2014-conference/"/>
    <updated>2014-10-13T16:02:07-04:00</updated>
    <id>http://ablwr.github.io/blog/2014/10/13/open-source-software-at-the-association-of-moving-image-archivists-2014-conference</id>
    <content type="html"><![CDATA[<p>Last week, I attended the Association of Moving Image Archivists annual conference, held this year in Savannah, GA. And <em>y&#8217;all</em>, I continue to be impressed with all of the open source projects and contributions happening in the field!! I am so pleased to see it grow in significance every year (along with my knowledge and capabilities of wrangling these projects).</p>

<p>Here is a round-up of the technologies discussed during the conference and links to more information.</p>

<h2>Git</h2>

<ul>
<li><a href="http://git-scm.com/">Git</a> as a technology</li>
<li><a href="https://github.com/">Github</a> as a popular platform</li>
<li><a href="https://education.github.com/pack">Github student pack</a> &mdash; A bundle of great software offered by Github to students for free</li>
<li><a href="https://github.com/FredrikNoren/ungit">Ungit</a> &mdash; A version control visualizer</li>
</ul>


<h2>Technologies</h2>

<ul>
<li><a href="http://www.bittorrent.com/">BitTorrent</a> &mdash; Distributed filesharing</li>
<li><a href="https://www.ffmpeg.org/">ffmpeg</a> &mdash; Audio/video manipulation framework</li>
<li><a href="http://www.imagemagick.org/">ImageMagick</a> &mdash; Image manipulation framework</li>
<li><a href="http://www.openannotation.org/">Open Annotation</a> &mdash; Open source annotation</li>
<li><a href="https://www.websocket.org/">Web Sockets</a> &mdash; Or how Ronallo got those interactive slides</li>
<li><a href="http://dev.w3.org/html5/webvtt/">WebVTT</a> &mdash; Open subtitles for the web</li>
</ul>


<h2>Projects</h2>

<ul>
<li><a href="https://github.com/avpreserve/AMS">American Archives Project</a></li>
<li><a href="https://www.archivematica.org/wiki/Main_Page">Archivematica</a></li>
<li><a href="https://www.accesstomemory.org/en/">AtoM</a></li>
<li><a href="http://avaa.bavc.org/artifactatlas/index.php/A/V_Artifact_Atlas">AVAA</a></li>
<li><a href="https://github.com/avalonmediasystem">Avalon</a></li>
<li><a href="http://www.sno.phy.queensu.ca/~phil/exiftool/">ExifTool</a></li>
<li><a href="https://github.com/avpreserve/fixity">Fixity</a></li>
<li><a href="http://ffmprovisor.herokuapp.com">ffmprovisor</a></li>
<li><a href="https://archive.org/index.php">Internet Archive</a></li>
<li><a href="http://mediaarea.net/en/MediaInfo">MediaInfo</a></li>
<li><a href="https://github.com/projecthydra">Project Hydra</a></li>
<li><a href="https://github.com/bavc/qctools">QCTools</a></li>
<li><a href="http://openvault.wgbh.org/">WGBH Open Vault</a></li>
</ul>


<h2>Projects with open source sentiment</h2>

<ul>
<li><a href="https://github.com/epiil/tape-cleaner">Arduino tape cleaner</a></li>
<li><a href="http://calpreservation.org/projects/audiovisual-preservation/">California Audiovisual Preservation Project</a></li>
<li><a href="http://dmia.drupalgardens.com/">Digital Moving Image Archives Guide</a></li>
<li><a href="http://xfrcollective.wordpress.com/">XFR Collective</a></li>
</ul>


<h2>Hack Day!</h2>

<ul>
<li><a href="http://wiki.curatecamp.org/index.php?title=Association_of_Moving_Image_Archivists_%26_Digital_Library_Federation_Hack_Day_2014">Hack Day page</a></li>
<li><a href="https://github.com/amiaopensource/avspace">AV_Space</a></li>
<li><a href="https://github.com/amiaopensource/characterization_compare">characterization compare</a></li>
<li><a href="https://github.com/amiaopensource/hackdaycapture">hackdaycapture</a></li>
<li><a href="https://github.com/tessafallon/pbcorevalidator/">pbcorevalidator</a></li>
<li><a href="https://github.com/jronallo/video-sprites">Video Sprites!</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Breaking down conference speakers by gender using Nokogiri and SexMachine]]></title>
    <link href="http://ablwr.github.io/blog/2014/09/28/breaking-down-conference-speakers-by-gender-using-nokogiri-and-sexmachine/"/>
    <updated>2014-09-28T14:32:49-04:00</updated>
    <id>http://ablwr.github.io/blog/2014/09/28/breaking-down-conference-speakers-by-gender-using-nokogiri-and-sexmachine</id>
    <content type="html"><![CDATA[<p>Last week, I was in converesation with some peers in the moving image archiving, preservation, conservation, (et al&hellip;) field and we were discussing ways to improve and empower the roles that women in the field have. One of the things that came up was it&rsquo;d be interesting to see the breakdown over time of the people presenting at the annual <a href="http://amianet.org">Association of Moving Image Archivists</a> <a href="http://www.amiaconference.com">conference</a> and whether it was appropriately stacked in terms of gender.</p>

<p>With around 200 speakers, it would be great if I could just grab this data algorithmically and not have to parse it piece-by-piece using my slow human brain! Over the weekend, I went to work combining Ruby web scraping tool, <a href="http://nokogiri.org/">Nokogiri</a>, with a library that does a pretty good job at determining probable gender based on first name (<a href="https://github.com/bmuller/sexmachine">SexMachine</a>). It was fun to wrangle data around, but not without conflicts.</p>

<p>Some problems:</p>

<ol>
<li><p>I wrote a parser for the most recent conference’s webpage, but that parser can’t be used for previous conferences. The layout for the previous year is different from the current layout, and the year before that is available only as a .pdf. The years prior to that aren’t (immediately and openly) available at all!</p></li>
<li><p>The website was not marked up in a way that made it easy to pull in only the speaker names. I had to throw in a lot of remove-if exceptions because I was basically having to pull in anything that was in a p tag and removing very long strings and very short strings (and a few other things).</p></li>
<li><p>Obviously gender is a larger spectrum than the binary male-female and assessment via name is not an ideal method, but I&rsquo;m just playin&#8217; with data here! I think the results will still hold value, but I always feel a little bit icky when I also have to push things into a gender binary.</p></li>
</ol>


<p>I can now take the rough breakdown of the data and just modify as needed. To do more complex problems, though, will involve more than just the parsed names in arrays separated by arrays (see below).</p>

<p>I’m not going to be able to pull out the precise data I want, but it was fun project and I was excited to spend a few hours writing (and thinking) in Ruby again, which I hadn’t really had the opportunity to do in the past month or so (it’s been all Javascript and front-end work around these parts).</p>

<p>Side note: Didn’t someone recently run a quick check on the gender breakdown of published authors in The Moving Image? That data is easier to grab because there’s less of it.</p>

<p>Plans going forward:</p>

<ol>
<li><p>Run quick analysis on the organization’s membership directory to get a rough idea of the overall distribution of the field.</p></li>
<li><p>Break data down with and without consideration to one person speaking multiple times. (Which is better to consider?)</p></li>
<li><p>Break data down with consideration to time chunks and weighing one person speaking for a full block of time differently than seven people speaking in the same block of time. (Side-consideration to assess the value of poster presentation time). This involves getting down with statistics and math.</p></li>
<li><p>VISUALIZATIONS.</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why wont Octopress just upload my images]]></title>
    <link href="http://ablwr.github.io/blog/2014/09/25/why-wont-octopress-just-upload-my-images/"/>
    <updated>2014-09-25T13:04:20-04:00</updated>
    <id>http://ablwr.github.io/blog/2014/09/25/why-wont-octopress-just-upload-my-images</id>
    <content type="html"><![CDATA[<p><em>Why won’t Octopress just upload my images?!?!?!?!?!?!, or how I learned to stop worrying and love the source.</em></p>

<p><img class="center" src="http://ablwr.github.io/images/glitch1.png"></p>

<p>I’ve been using Git for a while and I feel like I have a good grasp on it. I’ve also been using Octopress for a while, integrated into Github pages, and I feel like I have a good grasp on it, too. Rake tasks, right? I’ve WRITTEN rake tasks before! I got this! But for some reason, uploading images for me always seemed like it was a miracle that would work sometimes and not work at other times. Y’know… computer magic.</p>

<p><img class="center" src="http://ablwr.github.io/images/glitch2.png"></p>

<p>Sometimes it would just straight up EAT my images and I’d have to remake a screen cap and get angry and keep pounding my head against the code-wall. That’s dumb, though. That’s no way to solve a problem, especially when dealing with logical beasts that perform as instructed. But I wasn’t sure what I was doing wrong. I would just keep moving things around and committing until it seemed to give up and take my images.</p>

<p><img class="center" src="http://ablwr.github.io/images/glitch3.png"></p>

<p>It’s just not a good way to live.</p>

<p><img class="center" src="http://ablwr.github.io/images/glitch4.png"></p>

<p>Are you having this problem, too? I decided to figure it out.</p>

<p><img class="center" src="http://ablwr.github.io/images/glitch5.png"></p>

<p>I was dropping my images in the wrong file! With Octopress, there are a lot of potential places to put images. It’s tempting to put it in public/images folder. It’s also tempting to put it in the _deploy/images folder. Those are bad, though. Those are bad. You want to put it in the SOURCE folder. If you stick images in source/images, they will get picked up when running rake generate / rake deploy. If they go anywhere else, the rake task doesn’t know what to do so it just overwrites them and your images will just disappear.</p>

<p><img class="center" src="http://ablwr.github.io/images/glitch6.png"></p>

<p>Maybe this is a no-brainer, but sometimes I feel like a no-brainer, myself.</p>

<h1>P.S.</h1>

<p>Another note! It&rsquo;s important to use the right syntax when adding images. One method in Markdown is to use this syntax:</p>

<p> <code>![netflixforbooks](images/markdown.png)</code></p>

<p>But for Octopress, you want to use this:</p>

<p> <img class="center" src="http://ablwr.github.io/images/markdown.png"></p>

<p>Otherwise, images will work on the front page of your blog but they won&rsquo;t work when you visit the individual pages. The more you know&hellip;!</p>

<ul>
<li>I had to use an image tag because otherwise Markdown automatically transforms it into regular html, aka <code>&lt;img class="center" src="http://ablwr.github.io/images/markdown.png"&gt;</code> So meta!</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Netflix for Books]]></title>
    <link href="http://ablwr.github.io/blog/2014/09/25/netflix-for-books/"/>
    <updated>2014-09-25T12:01:14-04:00</updated>
    <id>http://ablwr.github.io/blog/2014/09/25/netflix-for-books</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://ablwr.github.io/images/oyster.png"></p>

<p>I came up with an idea to make a spoof/parody of the recently launched <a href="https://www.oysterbooks.com">Oyster</a>, a company that purports to be the <a href="http://www.nytimes.com/2014/08/07/technology/personaltech/aiming-to-be-the-netflix-of-books.html">“Netflix of books,”</a> allowing rentable access to digital books. This hit a sore spot among the librarians I know (and as a former librarian, I know many), because one of the biggest struggles in the field is increasing awareness in the capabilities of the modern library. Most libraries HAVE eBook access, plenty of it, and a lot of materials can be accessed through a library’s website without even having to go into the library. I think a service like Oyster has a lot of value, but I wanted to remind people that they can utilize the free resources available nearby.</p>

<p><img class="center" src="http://ablwr.github.io/images/worldcat.png"></p>

<p>So, I basically just made a splash page for WorldCat. WorldCat is a collective catalog used by over 72,000 libraries. Searching a book on WorldCat, a user can add their zip code and find the closest location of that resource, so she could know exactly where to go to pick it up. If I look up Harry Potter and request the eBook format, I can see that its available at several libraries near me, one of which is the Brooklyn Public Library. Assuming the user has a library card, she can just log in and get the book onto her preferred digital book reader in very little time. WorldCat is great, but its underused (just like our local libraries). It&rsquo;s also kinda ugly, so why not make it hip to modern internet eyes?</p>

<p><img class="center" src="http://ablwr.github.io/images/netflixforbooks.png"></p>

<p>I really wanted to integrate the WorldCat API into this project, but unfortunately the API is not open and available to the public. This isn’t the time or place to ramble on about the benefits of open source and open access to databases and applications, but I would have been able to put a lot more time and effort into making a more beautiful and friendlier front-end for the face of public libraries. Alas, alas.</p>

<p><a href="ablwr.github.io/netflix-for-books">Let’s use libraries!</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flatiron and Fog Creek Fellowship]]></title>
    <link href="http://ablwr.github.io/blog/2014/09/18/flatiron-and-fog-creek-fellowship/"/>
    <updated>2014-09-18T11:21:07-04:00</updated>
    <id>http://ablwr.github.io/blog/2014/09/18/flatiron-and-fog-creek-fellowship</id>
    <content type="html"><![CDATA[<p>To follow up my last <a href="http://ablwr.github.io/blog/2014/09/18/breaking-it-down/">blog about blogging</a> (meta), here is the blog post I originally intended to write. I’m pushing it up the queue over the other 13 pending posts.</p>

<p>Flatiron School was hard. It was one of the toughest, enduring challenges I’ve ever done in my life, and also the most rewarding. I got completely comfortable working from 8am to 10pm every day, excited to write code and build stuff and make things happen. After graduation, it can be hard to not lose that momentum.</p>

<p>Before coming to Flatiron, I had a regular 9-5 job as cataloging manager at a film archive. On top of that, I did some freelance consulting work. Well, it was really more like sub-consulting, if that is a thing. Anyway, I worked a lot independently. I have a couple of friends that, for a while, paid for desks at a coworking space here in New York and it was hard for me to understand how someone could justify paying so much money for a desk while freelancing instead of just working from home (and thus having to work less because you don&rsquo;t have to work the extra amount it takes to pay for the coworking space desk). I could understand the social benefits of working around others, but overall I just never understood the &ldquo;going to a coffee shop to work&rdquo; thing. Throughout college, I always worked from my dorm or house and hardly set foot in the library except to grab up books (which is kinda funny, since I have an advanced degree in library and information science now). Back to the point: I started getting paid to work, which means I had to pay attention to what I was doing and work efficiently. With personal projects or homework, it&rsquo;s fine to dabble around. But when it&rsquo;s business, I knew I had to stay focused or I&rsquo;d have to start billing half-hours, which means I&rsquo;d work for 4 hours but only really work for 2, which is a waste of my own time because all 4 hours certainly still felt like I was working, even if half of it was non-billed procrastination time. I also have two cats. They are very cute, but they are also capable of being very annoying.</p>

<p>Anyway, this is how I discovered the joy of having a space dedicated to just working and I renounced all negative vibes I had towards paying $500 for a desk in Brooklyn. Back in South Carolina, I worked for a University on weekdays and spent my weekends working on projects at the University library. I&rsquo;d work from home on weeknights, but it was so much harder to get things done when I kept getting distracted by little things like dirty dishes, crooked books on a shelf, making tea, neighbors, or cats. Mostly the cats.</p>

<p>Getting back to the point&hellip; after Flatiron, we were welcome to continue working on campus, which is great! Fortunately for me and 15 other recently minted lady developers, I was selected to participate in the <a href="http://flatironschool.com/fogcreek">Flatiron / Fog Creek Fellowship</a>.</p>

<p>Here is what we all get, according to the website:</p>

<blockquote><p>What Fellows get:</p>

<p>• A dedicated mentor from both the Fog Creek and Trello teams</p>

<p>• Events with the Fog Creek and Trello staff including Cofounders Joel Spolsky and Michael Pryor</p>

<p>• A desk at Fog Creek</p>

<p>• Daily lunch</p>

<p>• Technical interview practice and guidance</p>

<p>• Four 1:1 pairing sessions</p>

<p>• Help choosing and feedback on a side project</p>

<p>• 1:1 lunch with your mentor every other week</p></blockquote>

<p>To summarize: A desk, a lunch, a dude telling you stuff. To be honest, I wasn&rsquo;t sure how this was going to go down at first. To be even more honest, I was a little sad to be separated from my Flatiron classmates that would still be working at the home base. But the baby bird has to leave the nest sometime&hellip; I was kinda excited about the desk, though. Because I knew being out of the Flatiron work-all-the-time mode was going to be hard, and not having a dedicated space to work was going to be even harder. Looking for a job is hard and I am just as busy now as I was when I was still in the program.</p>

<p>I missed the fellowship orientation because I was driving from South Carolina to New York with two desks to not-work-at-home-at and two cats, among other things, so I was a little nervous to just pop right into such a highly regarded software company.</p>

<p>Immediately, though, I was made to feel SO WELCOME. My mentor is SUPER RAD, he sent me a bunch of emails in advance, he read through my blog and had a lot of questions to ask me. He is always ready to sit down with me at any time to teach me some of the more theory-heavy aspects of computer programming that I mostly missed out on, to ask me about how my job search is going, or to just make me watch the first ten minutes of Up and explain how it relates to software engineering AND LIFE. Everyone at Fog Creek / Trello has been SOOOO extremely nice and welcoming, and I am so happy to be participating in the inaugural fellowship. The mentors all got together and came up with a dedicated time (and trello board) to helping all of us collectively train up on Computer Science fundamentals.</p>

<p>It truly feels like a fellowship, by the academic definition. We all get access to resources like desks and lunch and an unlimited snack bar (oh god, the snack bar, the snack bar&hellip;) and open access to a very nice espresso machine, but more importantly we get things like Joel Spolsky personally teaching us how to use the espresso machine (something that I think many established software engineers have dreamt about at night), casual lunch conversations about time travel (this comes up a lot), talent shows, board game nights, and Friday socials.</p>

<p>So&hellip; what&rsquo;s the lesson from this blog post? Desks are important for working hard, but more important than a desk and a space is the people that you surround yourself with when working, so I&rsquo;m thrilled to get to regularly hang with such a great team of people while I work on finding a place to work. Thank you so much, Flatiron and Fog Creek &amp; Trello!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Breaking it down]]></title>
    <link href="http://ablwr.github.io/blog/2014/09/18/breaking-it-down/"/>
    <updated>2014-09-18T10:35:54-04:00</updated>
    <id>http://ablwr.github.io/blog/2014/09/18/breaking-it-down</id>
    <content type="html"><![CDATA[<p>When I started at the Flatiron School in June, I told myself I was going to blog about my feelings and what I was learning every week. EVERY week. Then, when I graduated and inevitably had not written a single blog post about how it was going, I said I was gonna write a big ol’ jumbo blog post about the whole twelve weeks and everything I learned and how amazing it was.</p>

<p>Anyway, I graduated a month ago and there is still no e-novella.</p>

<p>This covers two important lessons in programming:</p>

<ol>
<li><p><strong>Don’t get into code debt.</strong> If I had worked a little bit at a time towards my goal, I would have a weekly summary of what I was learning and doing while at Flatiron. But to speak to the other side of code debt: not writing about my experience was a bummer, but I was definitely spending it learning how to be a better programmer, which was the higher priority at the time, so I don’t feel too bad about it.</p></li>
<li><p><strong>Break problems down into smaller problems.</strong> Since I wasn’t a diligent blogger, I wanted to just write one big post about Flatiron. But that’s such a large task! There’s SO much I want to cover, so where would I even begin? The most important advice I have to regularly give myself is to break problems down into smaller problems, otherwise I potentially get overwhelmed and not know where to start, which would result in just never starting.</p></li>
</ol>


<p>Anyway, I hope to get those blog posts out in the world soon. If you are reading this because you are doing some cyber-research on the Flatiron School and are thinking of applying, do not hesitate for one second to get in touch! I love talking about it. I just haven&rsquo;t had the time to sit down and really blog it out.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning (and trolling) with Popcorn.js]]></title>
    <link href="http://ablwr.github.io/blog/2014/09/08/learning-and-trolling-with-popcorn-dot-js/"/>
    <updated>2014-09-08T11:01:02-04:00</updated>
    <id>http://ablwr.github.io/blog/2014/09/08/learning-and-trolling-with-popcorn-dot-js</id>
    <content type="html"><![CDATA[<p>Basically, I have a history of taking jokes too far. See also: <a href="http://instagram.com/p/ruP0rHjtbO/?modal=true">Tattoos of Avi’s face</a>. So when I was exploring <a href="https://www.mozilla.org/">Mozilla</a>’s <a href="http://popcornjs.org">Popcorn.js</a> and missing my Flatiron peers, I coded up a small app that would help me learn how to use Popcorn.js aaaaaaaand also troll my friends.</p>

<p>At Flatiron, we used a shared playlist system called <a href="http://sonos.com">Sonos</a>. Everyone could add tracks from online music collections like Spotify, Hype Machine, or Songza. Near the last third of the semester, as we were all on the brink of insanity and exhaustion, one song in particular kept making a rude appearance. I don’t know who started it or why, but the entire Flatiron office had to suffer through many, many, many instances of Seal’s Kiss from a Rose.</p>

<p>After Flatiron graduation, I was pretty excited to dig into some new projects while on the job hunt, but really missed hanging out with all of my Flatiron buds. To alleviate my withdrawl symptoms, I decided to integrate my Popcorn.js learning into an app to basically troll everyone I know.</p>

<p>To troll successfully, though, I first had to troll myself. Because music videos on youtube don&rsquo;t come with subtitles, I had to make those subtitles happen manually. I once had a job transcribing interviews, so I&rsquo;m pretty fast. But to get the timing right, I still had to submit myself to many, many listens of the same song.</p>

<p>Popcorn.js makes it easy to add supplemental media to video files based on timing.</p>

<p>Within a document listener, you create an instance variable with the .youtube suffix (obviously it&rsquo;s different if you are not using the YouTube API to access a video, but for this example, I used YouTube) and then declare a landing div ID and a link to the video itself.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>   <span class="kd">var</span> <span class="nx">pop</span> <span class="o">=</span> <span class="nx">Popcorn</span><span class="p">.</span><span class="nx">youtube</span><span class="p">(</span>
</span><span class='line'>     <span class="s1">&#39;#video&#39;</span><span class="p">,</span>
</span><span class='line'>     <span class="s1">&#39;https://www.youtube.com/watch?v=i4tTnIimi8E&#39;</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Afterwards, it&rsquo;s time to start adding footnotes! This takes in four options &mdash; a start time (in seconds), an end time (also in seconds, big surprise), the text you want to display, and the target div. The application of subtitle footnotes is simple, but it&rsquo;s easy to see what kind of complex and interesting things can be done based on video playback times.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>   <span class="p">.</span><span class="nx">footnote</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">start</span><span class="o">:</span> <span class="mi">94</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">end</span><span class="o">:</span> <span class="mi">97</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">text</span><span class="o">:</span> <span class="s2">&quot;Won&#39;t you tell me is that healthy, baby?&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">target</span><span class="o">:</span> <span class="s2">&quot;footnotediv&quot;</span>
</span><span class='line'>   <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p> At the end, just trigger play.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>    <span class="nx">pop</span><span class="p">.</span><span class="nx">play</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Try it yourself! <a href="http://ablwr.github.io/flatiron-karaoke">Sing your heart out here</a>.</p>

<p>There&rsquo;s also an easter egg, but you have to patiently wait for it (or sing sing sing for it).</p>

<p>User feedback: It worked! Everyone typed in a song and got Seal back and tried it again because they thought it was a bug. NOPE. The only person that didn’t get trolled had preemptively trolled by searching for “Kiss from a Rose” so she didn’t know it was the only possible song that could be returned.</p>

<p>In the future, I’d like to spend more time trying to figure out how a real karaoke app could be created by automatically generating accurate subtitles. I’d also like to spend more time on the CSS styles so I could figure out how to fake the text highlighting on karaoke videos. As I mentioned earlier, there&rsquo;s an easter egg &mdash; I&rsquo;d like to work on incorporating more complex supplemental data alongside video files, such as Google maps, Wikipedia page load triggers, and images.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using videogrep to make supercuts]]></title>
    <link href="http://ablwr.github.io/blog/2014/07/22/using-videogrep-to-make-supercuts/"/>
    <updated>2014-07-22T22:36:12-04:00</updated>
    <id>http://ablwr.github.io/blog/2014/07/22/using-videogrep-to-make-supercuts</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/antiboredom/videogrep">Videogrep</a> is a Python-based application that searches through a video file using its subtitles track and can cut video clips based on its search criteria.</p>

<p>Videogrep is SUPER easy to use&hellip; as long as ffmpeg is installed properly. If not, prepare for some configuring and installing.</p>

<p>I used videogrep to search through one of my favorite movies, Terrorvision, to find every time a character refers to something as &ldquo;The Pleasure (noun).&rdquo; Hint: it happens more times than you would think.</p>

<p>To do this, I only had to type one line and videogrep did the rest of the work.</p>

<p><code>python videogrep.py -i Terrorvision/Terrorvision.avi -o test_video.mp4 --search 'Pleasure'</code></p>

<p>It searched through the subtitles file and found six instances, which it printed to the screen along with their timestamps.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>524.357 to 527.86:  Pleasure Palace, here we come.
</span><span class='line'>1660.284 to 1663.453: Otherwise known as the Pleasure Zone.
</span><span class='line'>1734.4 to 1736.651: The Pleasure Den.
</span><span class='line'>1776.859 to 1779.527: on to the Pleasure Dome.
</span><span class='line'>1779.528 to 1782.905: To the Pleasure Dome.
</span><span class='line'>1840.756 to 1842.548: The Pleasure Dome.</span></code></pre></td></tr></table></div></figure>


<p>If there is an error, at this point it will let you know. But if all goes well, the following will print to the screen:</p>

<p><code>Your video is ready ! Fingers crossed for the Oscars !</code></p>

<p>Here is the video supercut. Something that might have taken a few hours for me to piece together using my memory of the movie and video editing software was done in less than a minute using the powers of Python and FFMpeg.</p>

<p>Voila!</p>

<iframe src="//player.vimeo.com/video/99057389" width="500" height="282" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>


<p> <p><a href="http://vimeo.com/99057389">Pleasure Supercut</a> from <a href="http://vimeo.com/orangelazarus">Ashley Blewer</a> on <a href="https://vimeo.com">Vimeo</a>.</p></p>

<p>This was just a simple example, but videogrep can get more specific based on the regular expression added into the search string. In the above example, I knew &ldquo;Pleasure&rdquo; was a proper noun because its the name of many rooms in the Putterman household. If I really wanted to grab every instance of the word, I would have had to search for &lsquo;pleasure|Pleasure&rsquo; to capture both uppercase and lowercase.</p>

<p>Videogrep can be even more powerful because it understands <a href="http://www.clips.ua.ac.be/pages/pattern-search">pattern recognition using pattern search</a>. I was able to extract what I wanted by just typing in one word, but it also understands word patterns. For example, you can use flags like JJ for adjective or NN for noun and it will extract every instance of a particular speech pattern.</p>

<p>It can also search for hypernyms, which are words that fit into a certain category and have a semantic relation to each other. For example, if you searched for automobile, you might also want to extract similar words like car, truck, or van. If you weren&rsquo;t picky about what kind of bird you were looking for, a hypernym search would result in crows, seagulls, and eagles.</p>

<p>Enjoy using videogrep and watch out for the monster!</p>

<iframe src="//player.vimeo.com/video/99093635" width="500" height="282" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>


<p> <p><a href="http://vimeo.com/99093635">TerrorVision Monster</a> from <a href="http://vimeo.com/orangelazarus">Ashley Blewer</a> on <a href="https://vimeo.com">Vimeo</a>.</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Canyon of Heroes]]></title>
    <link href="http://ablwr.github.io/blog/2014/07/16/canyon-of-heroes/"/>
    <updated>2014-07-16T08:38:39-04:00</updated>
    <id>http://ablwr.github.io/blog/2014/07/16/canyon-of-heroes</id>
    <content type="html"><![CDATA[<p>When walking to and from class every day at the bottom of Manhattan, I&rsquo;ve noticed plates of text on the ground with a date and name of a famous person. I didn&rsquo;t realize what these signs were about until I was walking out of the southmost Bowling Green stop and saw the initial plaque on the ground:</p>

<p><img class="center" src="http://ablwr.github.io/images/canyon-of-heroes.jpg" title="" ></p>

<p>After that, everything clicked! They are commemorating every ticker-tape parade held on Broadway, starting with the first to commemorate the dedication of the Statue of Liberty in 1886.</p>

<p>Before I came to the Flatiron School, I was working as a moving image archivist. I primarily worked with collections of newsreels from the 1920s and 1930s. My job was to catalog them and put them online for access. When I realized what the text on the ground stood for, I immediately ALSO realized that I recognized so many of the names because I had seen some of the actual parades happen (on film)! The text that struck me the most while walking up the street was this one:</p>

<p><img class="center" src="http://ablwr.github.io/images/canyon_of_heroes_amelia.jpg" title="" ></p>

<p>I&rsquo;ve <em>definitely</em> watched this footage. I ran to the (digital) archive and sure enough, <a href="http://mirc.sc.edu/islandora/object/usc%3A1866">there it was</a>.</p>

<p>Footage identification can be difficult when you don&rsquo;t have a lead, but this connection was pretty easy to make. I watched the footage, paying attention to the structures of the buildings, and then pulled up Flatiron School&rsquo;s address on <a href="https://www.google.com/maps/@40.705328,-74.013743,3a,75y,222.42h,90.24t/data=!3m4!1e1!3m2!1sxgNehf6c2LCLopGdOjKqkQ!2e0!6m1!1e1">Google Streetview</a>. Boom! It was a total match!</p>

<p>Here is a screencap of the Amelia Earheart ticker-tape parade superimposed on top of Google streetview.</p>

<p><img class="center" src="http://ablwr.github.io/images/broadway_thenandnow.png" title="" ></p>

<p>Pretty cool!</p>

<p>Bonus: The building that the Flatiron School is located in used to be the office building for the <a href="http://en.wikipedia.org/wiki/White_Star_Line">White Star Line</a>, which built the RMS Titanic (and many other, sturdier ships). Cool!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Form Helpers]]></title>
    <link href="http://ablwr.github.io/blog/2014/07/15/form-helpers/"/>
    <updated>2014-07-15T22:38:07-04:00</updated>
    <id>http://ablwr.github.io/blog/2014/07/15/form-helpers</id>
    <content type="html"><![CDATA[<p>Forms are hard! Forms are confusing in real life as well as on (or behind) the web. One problem with building web forms in Rails for me was that there are too many options! There are three distinct ways to create forms. And it’s also hard to tell which options are optional and which ones are required. Additionally, the syntax isn&rsquo;t always the same, so it can be hard to remember three different ways to do the same thing without mixing them up, especially as a beginner.</p>

<p><img class="center" src="http://ablwr.github.io/images/basic_form.png" title="" ></p>

<p>Here is the first form. This is the form that I think most people in my Ruby005 class would have written last week, before we learned about Rails form helpers. This is a form at its lowest level of abstraction while still being partially in Ruby, although it lacks Rails form helpers and form options helpers. This form just iterates through each ingredient and creates a checkbox. Checkboxes gives value of 1 if checked, 0 if not. And in the controller, we have to add ingredient_ids as an empty array in the params. It has to be called that or the whole thing won&rsquo;t work and all this code will be for naught.</p>

<p><img class="center" src="http://ablwr.github.io/images/form_tag.png" title="" ></p>

<p>Collection_check_boxes takes in five arguments, object, method, collection, value_method, text_method. Above, the recipe is the object, the ingredients_ids are the method, Ingredient.all is the collection, the :id is the value of the checkbox, and the name is the text to display with the checkbox. Best practice would be to abstract away the collection here so you are not calling a class in your View, and make a variable for Ingredient.all. Collection_check_boxes can look cumbersome with its five arguments, but its much cleaner than the previous code.</p>

<p><img class="center" src="http://ablwr.github.io/images/form_for.png" title="" ></p>

<p>In form_for, it looks like collection_check_boxes only takes FOUR arguments. And when you’re in formland, that’s an easy way to remember. Form_FOR takes FOUR. It actually takes five arguments, but one has already been declared at the beginning of the form. It’s @recipe.</p>

<p>There&rsquo;s plenty more to learn about forms and form helpers, but I hope this little post can clear up some of the confusion surrounding usage.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[N+1+Arel+Me]]></title>
    <link href="http://ablwr.github.io/blog/2014/07/15/n-plus-1-plus-arel-plus-me/"/>
    <updated>2014-07-15T21:56:54-04:00</updated>
    <id>http://ablwr.github.io/blog/2014/07/15/n-plus-1-plus-arel-plus-me</id>
    <content type="html"><![CDATA[<p>Component fails, the redundant N +1 configuration, the vulnerability of the system in the form provided. Part (s), one independent backup component at least. During normal operation, the active ingredients as the resistance standby backup system, or not to participate in the following way, passive / active. During failover, the drop in the system (the system availability, block) to restore transparency place during failover, but it depends on the particular solution.</p>

<p><img class="center" src="http://ablwr.github.io/images/arelenglish.JPG" title="" ></p>

<p>This activity &ndash; the other parts of the operation, the backup is a fully functional components, in one case, N 1 redundant, and can be active ingredients, but removed from component failure, the component will be able to run if the system is able to produce to be active.</p>

<p><i class='emoji scream'></i> <i class='emoji scream'></i> <i class='emoji scream'></i> <i class='emoji scream'></i> <i class='emoji scream'></i> <i class='emoji scream'></i> <i class='emoji scream'></i> <i class='emoji scream'></i> <i class='emoji scream'></i> <i class='emoji scream'></i> <i class='emoji scream'></i> <i class='emoji scream'></i> <i class='emoji scream'></i> <i class='emoji scream'></i></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Twitter bot roundup]]></title>
    <link href="http://ablwr.github.io/blog/2014/07/01/twitter-bot-roundup/"/>
    <updated>2014-07-01T18:27:46-04:00</updated>
    <id>http://ablwr.github.io/blog/2014/07/01/twitter-bot-roundup</id>
    <content type="html"><![CDATA[<p><code>5.times { blog }</code></p>

<p>I wrote a few blog posts about the minor trials and tribulations of launching a Twitter bot that mimics a user&rsquo;s speaking patterns, based on a cool gem. Here they are, rounded up.</p>

<p><a href="http://ablwr.github.io/blog/2014/06/24/twitter-bots/">The Bots Are Coming! Twitter Bots!</a></p>

<p><a href="http://ablwr.github.io/blog/2014/06/25/twitter-bots-2-authorizing-the-bot/">Twitter Bots 2: Authorizing the Bot</a></p>

<p><a href="http://ablwr.github.io/blog/2014/06/28/twitter-bots-3-keeping-your-bot-alive/">Twitter Bots 3: Keeping Your Bot Alive</a></p>

<p><a href="http://ablwr.github.io/blog/2014/06/28/twitter-bots-4-mad-science/">Twitter Bots 4: MAD SCIENCE</a></p>

<p><a href="http://ablwr.github.io/blog/2014/06/29/twitter-bots-5-scheduling-tweets-with-cron/">Twitter Bots 5: Scheduling Tweets With Cron</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Twitter Bots 5: Scheduling tweets with Cron]]></title>
    <link href="http://ablwr.github.io/blog/2014/06/29/twitter-bots-5-scheduling-tweets-with-cron/"/>
    <updated>2014-06-29T21:24:56-04:00</updated>
    <id>http://ablwr.github.io/blog/2014/06/29/twitter-bots-5-scheduling-tweets-with-cron</id>
    <content type="html"><![CDATA[<p>Cron is a software utility that is used to schedule actions in time. It&rsquo;s great for handling reoccuring tasks. Twitter bots use a Cron statement to generate a tweet regularly. Cron tasks are super useful, but the syntax can be a little confusing and hard to remember.</p>

<p>The default bot tweets once a day, which is represented by <code>0 0 * * *</code></p>

<p>I changed my bot to tweet once an hour, which is represented by <code>0 * * * *</code></p>

<p>If I want my bot to tweet every hour from 9-5 on weekdays, it would look like <code>0 9-18 * * 1-5</code></p>

<p>Are you scratching your head? How can those numbers and letters mean anything?</p>

<p>In a row of five ( * * * * *), numbers break down like this:</p>

<ol>
<li> Minutes 2. Hours 3. Day (of month) 4. Months 5. Day (of week)</li>
</ol>


<p>That makes sense. Sort of. Except for having two different ways to represent time in a day, especially when they are not next to each other! Day of the month can be any number between 1-31 and is contingent on the month field. Day of the week is any number 0-6 and represents Sunday-Saturday.</p>

<p>The astericks means &ldquo;every.&rdquo; If a field has an astericks, it will trigger the event at that time interval.</p>

<p>Expressions aren&rsquo;t limited to asterisks and numbers. Other special characters include the slash (<code>/</code>), the comma (<code>,</code>), and the hyphen (<code>-</code>). The slash is used for increments of ranges. If I wanted to schedule an event to occur every five hours, I would use the string <code>0 */5 * * *</code>. Commas are used to separate items in a list. If I wanted an event to occur five minutes past the hour and five minutes before the hour, I could use the expression <code>5,55 * * * *</code>. Hyphens denote ranges. If I wanted to schedule an event to occur at the top of every hour during the Monday-Friday workweek, I would write <code>0 0 * * 1-5</code>.</p>

<p>If you don&rsquo;t want to figure out all of this syntax and just want to stay a die-hard Rubyist, you can also just install the gem &ldquo;whenever&rdquo; (<a href="https://github.com/javan/whenever">available here</a>). Another way to integrate Cron syntax into Ruby apps is the gem <a href="https://github.com/jmettraux/rufus-scheduler">Rufus-scheduler</a>.</p>

<p>Important note: If you are updating your bot&rsquo;s Cron settings, you have to re-run the archive and modeling files to see reflected updates.</p>

<hr />

<p>More info:</p>

<p><a href="http://en.wikipedia.org/wiki/Cron">Cron on Wikipedia</a></p>

<p><a href="http://railscasts.com/episodes/164-cron-in-ruby">RailsCasts #164 Cron in Ruby</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Twitter Bots 4: MAD SCIENCE]]></title>
    <link href="http://ablwr.github.io/blog/2014/06/28/twitter-bots-4-mad-science/"/>
    <updated>2014-06-28T21:09:57-04:00</updated>
    <id>http://ablwr.github.io/blog/2014/06/28/twitter-bots-4-mad-science</id>
    <content type="html"><![CDATA[<p>My twitter bot was born on the same day as my BFF (bot-ferverent friend) Athena&rsquo;s bot. In fact, we live together and were both working on our bots on the same night in different places because I was still at Flatiron and she was at home, and we didn&rsquo;t realize until our bots were nearly launched that we had both been working on the same project (and probably could have finished more quickly, as I was having trouble with something she had solved and she was having trouble with something I had solved). Pair programming is important! Anyway&hellip; since we are both bot-obsessed and I like data experiments as well as science experiments, I asked Athena for her bot&rsquo;s model file, which is json-formatted data of all of her tweets. I plugged her json data into a file with all of my json data and merged them together using the &ldquo;ebooks consume&rdquo; data-mixer that comes with the twitter_ebooks gem. Shortly after that, I had spawned a new daughter-bot, <a href="https://twitter.com/ashthena_ebooks">@ashthena_ebooks</a>, which is a combination of both of our tweets. Right now, this bot is a little biased towards my tweets, since I have a lot more than she did, but I hope to condense and mix that data up a bit more in the future, to produce weirder results.</p>

<blockquote class="twitter-tweet" lang="en"><p>Much like the smell of vinegar syndrome in the morning.</p>&mdash; ɐuǝɥʇɥs∀ (@ashthena_ebooks) <a href="https://twitter.com/ashthena_ebooks/statuses/483414614978613248">June 30, 2014</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Twitter Bots 3: Keeping your bot alive]]></title>
    <link href="http://ablwr.github.io/blog/2014/06/28/twitter-bots-3-keeping-your-bot-alive/"/>
    <updated>2014-06-28T20:31:52-04:00</updated>
    <id>http://ablwr.github.io/blog/2014/06/28/twitter-bots-3-keeping-your-bot-alive</id>
    <content type="html"><![CDATA[<blockquote class="twitter-tweet" data-partner="tweetdeck"><p><a href="https://twitter.com/wetted_ashes">@wetted_ashes</a> <a href="https://twitter.com/ablwr">@ablwr</a> Just spent too much time coding and having so many excellent things to read thanks to <a href="https://twitter.com/hashtag/timezones?src=hash">#timezones</a></p>&mdash; ¡ɹǝʍǝlq ʎǝlɥs∀ (@ablwr_ebooks) <a href="https://twitter.com/ablwr_ebooks/statuses/478713633023602688">June 17, 2014</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>Once a Twitter bot has been configured, it has to stay running in order to stay alive. And for that, it needs a server. When I was debugging my bot, I was running it off of my computer and got notifications of activity in my terminal. This works if I want my bot to only be active when I am active, but I want my bot to be available all day and night!</p>

<p>The most logical way to do that would be to deploy my bot&rsquo;s code to a Heroku instance. It&rsquo;s free and super easy, especially if you already have a good grasp on git workflows. Basically you just have to&hellip;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git init
</span><span class='line'>git add .
</span><span class='line'>git commit -m "BOTS"</span></code></pre></td></tr></table></div></figure>


<p>then,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>heroku create
</span><span class='line'>git push heroku master</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s it! That is it. Actually, that is not it, because I had to log onto the heroku web interface and adjust the Dynos worker to 1 instead of 0.</p>

<p><img class="center" src="http://ablwr.github.io/images/herokurunner.png" width="800" title="'heroku page'" ></p>

<p> But after that, my bot was again operational and back to her normal (myself)
self.</p>

<blockquote class="twitter-tweet" data-partner="tweetdeck"><p><a href="https://twitter.com/ablwr">@ablwr</a> <a href="https://twitter.com/trlwagner">@trlwagner</a> The pass is lurking in the reboot, everyone get renewed at 21, and I do not like that.</p>&mdash; ¡ɹǝʍǝlq ʎǝlɥs∀ (@ablwr_ebooks) <a href="https://twitter.com/ablwr_ebooks/statuses/478715343737602049">June 17, 2014</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Twitter Bots 2: Authorizing the Bot]]></title>
    <link href="http://ablwr.github.io/blog/2014/06/25/twitter-bots-2-authorizing-the-bot/"/>
    <updated>2014-06-25T12:54:34-04:00</updated>
    <id>http://ablwr.github.io/blog/2014/06/25/twitter-bots-2-authorizing-the-bot</id>
    <content type="html"><![CDATA[<p>For me, the hardest part of getting a Twitter bot up and running was negotiating with Twitter&rsquo;s API keys and application settings. The primary reason for this was probably that I kept getting overly excited and jumping ahead, trying to finish the project too soon. I first set up an app by registering my primary twitter account. Turns out that wasn&rsquo;t necessary at all, and I could access and download my tweets just by using <a href="https://github.com/marcel/twurl">twurl</a> to collect authenticate and grab my main account&rsquo;s twitter archive. I THINK. Those authentication details went into a hidden file, .ebooksrc, in my computer&rsquo;s main user directory. I know because I had to break into it several times and switch out the keys in order to get it to work, but most users shouldn&rsquo;t need to open it again, once it&rsquo;s in there.</p>

<p>To get the bot operational, I had to create an dev account and app using my bot&rsquo;s twitter account (oh yeah, I also had to register a new twitter account &mdash; but that&rsquo;s obvious, right? I&rsquo;m not talking to a bot, I&rsquo;m talking to a human&hellip; right?)</p>

<p>Under My Applications (next to my user profile), I created a new app. Under the API Keys tab, I generated some access tokens. The consumer and OAuth details can then be added to the bot&rsquo;s bots.rb file, along with the bot&rsquo;s username and the bot model (in my case, my main twitter account).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CONSUMER_KEY = ""
</span><span class='line'>CONSUMER_SECRET = ""</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  Ebooks::Bot.new("") do |bot| # Ebooks account username
</span><span class='line'>  bot.oauth_token = "" # oauth token for ebooks account
</span><span class='line'>  bot.oauth_token_secret = "" # oauth secret for ebooks account
</span><span class='line'>
</span><span class='line'>  make_bot(bot, "") # This should be the name of the text model generated from the base twitter account
</span></code></pre></td></tr></table></div></figure>


<p>Sounds easy, but I had such a hard time! Writing it all up, I am embarassed that it took me so many tries to get it right. My problem was that I first thought that the CONSUMER_KEY fields needed to come from my main twitter account instead of from the bot&rsquo;s account. Then, I changed the CONSUMER_KEY details but also changed the info in the .ebooksrc file. Then, I changed them both around again but didn&rsquo;t refresh my OAuth token.</p>

<p>The final step was that my bot was running but unable to do anything because the API Keys permission access level was set to read-only. It is not super-clear in the documentation, but the account generating the access token has to have a valid phone number associated with it in order to get granted permission for read/write/execute status. After confirming with a phone number, my bot was able to talk to people and generate its own tweets based on my model.</p>

<p>A final important debugging note: After changing the permission access level from read-only to read/write, you will probably have to regenerate the API keys and add the new codes to the app.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The bots are coming! Twitter bots!]]></title>
    <link href="http://ablwr.github.io/blog/2014/06/24/twitter-bots/"/>
    <updated>2014-06-24T23:10:17-04:00</updated>
    <id>http://ablwr.github.io/blog/2014/06/24/twitter-bots</id>
    <content type="html"><![CDATA[<p>When I accepted a spot in the Flatiron School Ruby005 class, I knew my social life and, uh, casual internet-browsing life (?) would be cut dramatically down while I would be focusing all of my efforts on learning Ruby. I didn&rsquo;t want my friends to miss me too much (which is hard, since I also had to move from South Carolina to New York), so I decided to build a twitter bot that could tweet and talk to my friends.</p>

<p>Fortunately, there&rsquo;s already a Ruby gem that does all of the work for me. So I didn&rsquo;t really have to build a bot, I could just launch one! I used the gem found <a href="https://github.com/mispy/twitter_ebooks">here</a> and pulled in the example bot&rsquo;s code. When I got stuck, I referenced <a href="https://github.com/ScaryEnderman/Twitter-Bots-Tutorial">this bot tutorial</a>. Setting up the bot and modifying the code was easy, but I hit a few snags trying to cooperate with the Twitter app API and OAuth.</p>

<p>Here&rsquo;s how the twitter_ebooks gem works.</p>

<ol>
<li>The gem pulls in your twitter history in json format.</li>
<li>Then, it parses through the json data and identifies words and phrases according to grammatical structure.</li>
<li>It randomly generates sentences based on a user&rsquo;s tweet history. A cron job is set up to tweet randomly once a day, but I bumped that up to once an hour.</li>
<li>It knows how to respond to other users when they tweet at the bot.</li>
<li>It has a keyword list and will favorite or retweet tweets in its timeline that use those keywords.</li>
</ol>


<p>Here are a few examples of what my bot has to say:</p>

<blockquote class="twitter-tweet" lang="en"><p>CSS is in this instance, or is, at minimum, I&#39;ll take 6.</p>&mdash; ¡ɹǝʍǝlq ʎǝlɥs∀ (@ablwr_ebooks) <a href="https://twitter.com/ablwr_ebooks/statuses/481632877323354112">June 25, 2014</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="en"><p>&#8230;Damn it, iPhone, I hate it when you get a job at a grocery store.</p>&mdash; ¡ɹǝʍǝlq ʎǝlɥs∀ (@ablwr_ebooks) <a href="https://twitter.com/ablwr_ebooks/statuses/480258821844377600">June 21, 2014</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="en"><p>Tumblr adding fake film grain, tulips, u-matic tape players, cleaning my ears with a q-tip, maps&#8230;</p>&mdash; ¡ɹǝʍǝlq ʎǝlɥs∀ (@ablwr_ebooks) <a href="https://twitter.com/ablwr_ebooks/statuses/479307552946421762">June 18, 2014</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>But the best part of having a Twitter bot is that it can interact with other users! Classmate <a href="http://randallreedjr.com/">Randall</a> asked her for some advice:</p>

<blockquote class="twitter-tweet" lang="en"><p><a href="https://twitter.com/ablwr_ebooks">@ablwr_ebooks</a> What should I do this weekend?</p>&mdash; Randall Reed Jr. (@randallocalypse) <a href="https://twitter.com/randallocalypse/statuses/480034237391704064">June 20, 2014</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<blockquote class="twitter-tweet" data-partner="tweetdeck"><p><a href="https://twitter.com/randallocalypse">@randallocalypse</a> I hope this suggests a return of the insane hotels.</p>&mdash; ¡ɹǝʍǝlq ʎǝlɥs∀ (@ablwr_ebooks) <a href="https://twitter.com/ablwr_ebooks/statuses/480034319030026240">June 20, 2014</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>That&rsquo;s my bot! Have your bot add my bot at <a href="http://www.twitter.com/ablwr_ebooks">@ablwr_ebooks</a>. Stay tuned for some more technical blog posts about working through the Twitter authentication steps, understanding CRON, modifying a bot, deploying to heroku, and ~mad science experiments~.</p>
]]></content>
  </entry>
  
</feed>
